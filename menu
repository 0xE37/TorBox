#!/bin/bash

# This file is a part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2020 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file displays the main menu and executes all relevant scripts.
#
# SYNTAX
# ./menu
#
#
###### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=14
#
# How many lines are only for decoration and spaces?
NO_SPACER=4
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+$NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
TORSTATS="sudo -u debian-tor nyx"
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"
EXITID="EXITID=0"

##############################
######## FUNCTIONS ###########

#include lib
.  lib/torbox.lib

# This opens the ports, after a restart if bridge relay is on
check_bridge_relay()
{
  MODE_BR=$(grep "BridgeRelay" ${TORRC})
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    ORPORT=$(grep "^ORPort" ${TORRC})
    OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC})
    sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
    sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)
    (sudo iptables -C INPUT -p tcp --dport $sORPORT -j ACCEPT) 2> /dev/null
    RULE_CHECK=$?
    if [ $RULE_CHECK = 1 ]; then
      sudo iptables -A INPUT -p tcp --dport $sORPORT -j ACCEPT
      sudo iptables -A INPUT -p tcp --dport $sOBFS4PORT -j ACCEPT
    fi
  fi
}

######## PREPARATIONS ########
# Resetting run-file (the initial EXITID in the runfile has to be 0)
clear
sudo sed -i "s/^EXITID=.*/${EXITID}/" ${RUNFILE}

check_bridge_relay
check_tor

###### DISPLAY THE MENU ######
CHOICE=$(whiptail --nocancel --title "TorBox v.0.3.0 - MAIN MENU" --menu "Choose an option (ESC -> command prompt)                      $TOR_STATUS" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
" " " " \
"  1" "Tor statistics (press m for menu / q to quit)" \
"  2" "Enforce a new exit node with a new IP" \
"  3" "Show the Tor log file - quick and dirty (press CTRL-C to leave)" \
"===" "===================================[Where is the Internet?]===" \
"  4" "Ethernet cable (eth0)" \
"  5" "Wireless network (through a USB adapter; wlan1)" \
"  6" "Wireless network (through the onboard chip; wlan0)" \
"  7" "Cellular link or USB dongle (ppp0; usb0)" \
"  8" "USB ethernet adapter or Tethering (with iOS) (eth1)" \
"===" "===============================================[Sub-Menues]===" \
"  9" "Go to the countermeasure sub-menu..." \
" 10" "Go to the configuration sub-menu..." \
" 11" "Go to defend the open internet..." \
" 12" "Go to the update and reset sub-menu..." \
"===" "========================================[Reboot & Shutdown]===" \
" 13" "Reboot TorBox" \
" 14" "Shutdown TorBox" 3>&1 1>&2 2>&3)
exitstatus=$?

if [ $exitstatus = 0 ]; then
	if [ "$CHOICE" != " " ]; then

# This starts nyx (Tor statistics)
		if [ $CHOICE = 1 ]; then
			clear
			$TORSTATS

# This enforces a new exit node
    elif [ $CHOICE = 2 ]; then
      sudo bash new_ident

# This displays the Tor LOG file (quick and dirty)
    elif [ $CHOICE = 3 ]; then
      trap "bash menu; exit 0" SIGINT
      sudo tail -f -n 25 /var/log/tor/notices.log

# Ethernet cable internet eth0 --> wlan0 / eth1
    elif [ $CHOICE = 4 ]; then
      INPUT=$(cat text/cable-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
        echo ""
	      echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
	      echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
	      echo -e "${RED}[+] Usually, the configuration continuous afterwards -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to one minute.${NOCOLOR}"
	      echo -e "${RED}[+] If it doesn't, then please reconnect your client device with TorBox's${NOCOLOR}"
        echo -e "${RED}    wireless network and reconnect with our ssh program.${NOCOLOR}"
	      echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
	      echo ""
        (nohup ./hostapd_fallback_komplex wlan0 eth1) 2>/dev/null
        clear
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        if ip link | grep eth1 | grep "state UP"; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo bash set_interfaces_2 eth0 wlan0 eth1 $CAPTIVE
          finish
          (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo bash set_interfaces eth0 wlan0 $CAPTIVE
          finish
          (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
        fi
      fi

# Wireless network (through a USB adapter; wlan1 --> wlan0 / eth0)
    elif [ $CHOICE = 5 ]; then
      INPUT=$(cat text/wlan1-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        if ip link | grep wlan1; then
          clear
          echo ""
          echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
          echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
          echo -e "${RED}[+] Usually, the configuration continuous afterwards -- however,${NOCOLOR}"
          echo -e "${RED}    this can take up to one minute.${NOCOLOR}"
          echo -e "${RED}[+] If it doesn't, then please reconnect your client device with TorBox's${NOCOLOR}"
          echo -e "${RED}    wireless network and reconnect with our ssh program.${NOCOLOR}"
          echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
          echo -e "${RED}    load the default values.${NOCOLOR}"
          echo ""
          (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
          clear
          INPUT=$(cat text/captive_or_not-text)
          if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
            CAPTIVE=1
          else
            CAPTIVE=0
          fi
          sleep 2
          if ip link | grep eth0 | grep "state UP"; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo bash set_interfaces_2 wlan1 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo bash set_interfaces wlan1 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          whiptail --title "TorBox - INFO" --textbox text/no_wlan1-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
        fi
      fi

# Wireless network (through the onboard chip; wlan0 --> wlan1 / eth0)
    elif [ $CHOICE = 6 ]; then
      INPUT=$(cat text/wlan0-text)
      if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
        echo ""
        echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
        echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
        echo -e "${RED}[+] Usually, the configuration continuous afterwards -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to one minute.${NOCOLOR}"
        echo -e "${RED}[+] If it doesn't, then please reconnect your client device with TorBox's${NOCOLOR}"
        echo -e "${RED}    wireless network and reconnect with our ssh program.${NOCOLOR}"
        echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
        echo ""
        (nohup ./hostapd_fallback_komplex wlan1 eth0) 2>/dev/null
        clear
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        eth0_up=$(ip link | grep eth0 | grep "state UP")
        wlan1_up=$(ip link | grep wlan1 | grep "state UP")
        if [ -n "$eth0_up" ] && [ -n "$wlan1_up" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo bash set_interfaces_2 wlan0 wlan1 eth0 $CAPTIVE
          finish
        elif [ -n "$eth0_up" ] && [ -z "$wlan1_up" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo bash set_interfaces wlan0 eth0 $CAPTIVE
          finish
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo bash set_interfaces wlan0 wlan1 $CAPTIVE
          finish
        fi
      fi

# Cellular or other connections (ppp0; usb0 --> wlan0 / eth0)
    elif [ $CHOICE = 7 ]; then
      INPUT=$(cat text/ppp0-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
        echo ""
        echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
        echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
        echo -e "${RED}[+] Usually, the configuration continuous afterwards -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to one minute.${NOCOLOR}"
        echo -e "${RED}[+] If it doesn't, then please reconnect your client device with TorBox's${NOCOLOR}"
        echo -e "${RED}    wireless network and reconnect with our ssh program.${NOCOLOR}"
        echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
        echo ""
        (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
        clear
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        if ip link | grep usb0 ; then
          if ip link | grep eth0 | grep "state UP"; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo bash set_interfaces_2 usb0 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo bash set_interfaces usb0 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          sudo pon > /dev/null
          sleep 5
          if ip link | grep ppp0 > /dev/null; then
            if ip link | grep eth0 | grep "state UP"; then
              sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
              sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
              sudo bash set_interfaces_2 ppp0 wlan0 eth0 $CAPTIVE
              finish
              (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
            else
              sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
              sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
              sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
              sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
              sudo bash set_interfaces ppp0 wlan0 $CAPTIVE
              finish
              (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
            fi
          else
            whiptail --title "TorBox - INFO" --textbox text/no_ppp0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
          fi
        fi
      fi

# Tethering or USB ethernet adapter (eth1 --> wlan0 / eth0)
    elif [ $CHOICE = 8 ]; then
      INPUT=$(cat text/ppp0-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        if ip link | grep eth1 ; then
          clear
          echo ""
          echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
          echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
          echo -e "${RED}[+] Usually, the configuration continuous afterwards -- however,${NOCOLOR}"
          echo -e "${RED}    this can take up to one minute.${NOCOLOR}"
          echo -e "${RED}[+] If it doesn't, then please reconnect your client device with TorBox's${NOCOLOR}"
          echo -e "${RED}    wireless network and reconnect with our ssh program.${NOCOLOR}"
          echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
          echo -e "${RED}    load the default values.${NOCOLOR}"
          echo ""
          (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
          clear
          INPUT=$(cat text/captive_or_not-text)
          if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
            CAPTIVE=1
          else
            CAPTIVE=0
          fi
          sleep 2
          if ip link | grep eth0 | grep "state UP"; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo bash set_interfaces_2 eth1 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo bash set_interfaces eth1 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          whiptail --title "TorBox - INFO" --textbox text/no_eth1-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
        fi
      fi

# Sub-menues
    elif [ $CHOICE = 9 ]; then
      bash menu-bridges
    elif [ $CHOICE = 10 ]; then
      bash menu-config
    elif [ $CHOICE = 11 ]; then
      bash menu-server
    elif [ $CHOICE = 12 ]; then
      screen bash update
      clear
      cd
      cd torbox

# Reboot
    elif [ $CHOICE = 13 ]; then
      wlan1_up=$(ip addr show wlan1 | grep 192.168.42.1)
      clear
      if [ -z wlan1_up ]; then
        (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
      fi
      echo -e "${RED}[+] Rebooting TorBox...${NOCOLOR}"
      echo -e "${WHITE}[!] If you have activated Bridges or Bridge Relay, these services will be reactivated automatically after the restart.${NOCOLOR}"
      echo ""
      sleep 2
      sudo reboot
      exit 0

# Shutdown
    elif [ $CHOICE = 14 ]; then
      wlan1_up=$(ip addr show wlan1 | grep 192.168.42.1)
      clear
      if [ -z wlan1_up ]; then
        (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
      fi
      echo -e "${RED}[+] Shutting down TorBox...${NOCOLOR}"
      sleep 2
      echo -e "${WHITE}[!] If you have activated Bridges or Bridge Relay, these services will be reactivated automatically after the restart.${NOCOLOR}"
      echo -e "${WHITE}[!] You can disconnect TorBox from the power source in about 30 second...${NOCOLOR}"
      echo ""
      sleep 2
      sudo shutdown -h now
      exit 0
		fi
	fi
else
	clear
	PROMPTTEXT=$(cat text/prompt-text)
	echo -e "$PROMPTTEXT"
	echo " "
	exit 0
fi
bash menu
