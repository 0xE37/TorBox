#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2021 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file updates the base system of the TorBox and upgrades it to the latest stable tor release.
#
# SYNTAX
# screen bash update
#
#
##### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=11
#
# How many lines are only for decoration and spaces?
NO_SPACER=0
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+$NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
LOOP_NUMBER=0
RECOMPILE=0
TORBOX_UPDATE=0
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"
NEW_IDENT="new_ident"
BOOTMSG=0

##############################
######## FUNCTIONS ###########

# include lib
.  lib/torbox.lib

#This function checks the internet connection (!! don't source it out to a seperate shell script file or to the library !!)
online_check_update()
{
  clear
  echo -e "${RED}[+] Checking internet connectivity - please wait...${NOCOLOR}"
  OCHECK=$(curl -m 5 -s http://google.com)
  clear
  if [ $? -gt 0 ]; then
    INPUT="It seems that your TorBox is not properly connected to the internet! For this operation, TorBox to be properly connected with the internet!\n\nAre you really sure to continue without proper internet connection (I guess, you know what you are doing)?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
      OCHECK=0
    else
      trap "bash update; exit 0" EXIT
      exit 0
    fi
  fi
}

# This function updates the firmware on a RPI4
update_firmware()
{
  online_check_update
  clear
  sudo apt-get install rpi-eeprom
  sleep 2
  clear
  echo -e "${RED}[!] Updating firmware if requiered...${NOCOLOR}"
  echo " "
  sudo rpi-eeprom-update
  echo " "
  read -n 1 -s -r -p "Press any key to continue"
  echo " "
  sudo rpi-eeprom-update -a
  echo " "
  echo -e "${WHITE}[+] DONE! ${NOCOLOR}"
  sleep 5
}

# This function updates TOR
update_tor()
{
  online_check_update
  clear
  if ! grep "torproject" /etc/apt/sources.list ; then
    sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
    sudo printf "\n# Added by TorBox update script\ndeb https://deb.torproject.org/torproject.org buster main\ndeb-src https://deb.torproject.org/torproject.org buster main\n" | sudo tee -a /etc/apt/sources.list
  fi
  sudo curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | sudo apt-key add -
  if [ -d ~/debian-packages ] ; then sudo rm -r ~/debian-packages ; fi
  mkdir ~/debian-packages; cd ~/debian-packages
  sudo apt-get -y update
  apt source tor
  KERNEL_VERS=$(uname -s -r)
  TOR_VERS=$(tor --version|rev|cut -c2-|rev)
  TOR_VERS_NUMBER=$(tor --version|rev|cut -c2-|rev|cut -c13-)
  SOURCE_VERS_NUMBER=$(ls -l|grep "^d"|grep -o "tor.*"|cut -d " " -f10-)
  if [ "$SOURCE_VERS_NUMBER" == "$TOR_VERS_NUMBER" ] ; then
    INPUT="\nThis is the version of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS (newest stable version!)\n\nThere is no new stable version of Tor around!\nWould you like to recompile Tor anyway?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
      RECOMPILE=1
    else
      RECOMPILE=0
    fi
  elif [ -z "$SOURCE_VERS_NUMBER" ] ; then
    INPUT="\nThis is the version of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS (newest stable version!)\n\nHowever, something went wrong! I couldn't download the Tor package. You may try it later or manually !!"
    whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    RECOMPILE=0
  else
    if [ $LOOP_NUMBER = 1 ]; then
      INPUT="\nThis is the version of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS (older stable version!)\n\nWould you like to update to the newest version ($SOURCE_VERS_NUMBER) of Tor?"
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
        RECOMPILE=1
      else
        RECOMPILE=0
      fi
    else
      RECOMPILE=1
    fi
  fi
  if [ $RECOMPILE = 1 ]; then
    sudo apt-get -y install build-essential fakeroot devscripts
    sudo apt-get -y upgrade tor deb.torproject.org-keyring
    sudo apt-get -y build-dep tor deb.torproject.org-keyring
    cd tor-*
    sudo debuild -rfakeroot -uc -us
    cd ..
    sudo dpkg -i tor_*.deb
    cd
    sudo rm -r ~/debian-packages
    sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
    sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
    sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
    sudo systemctl enable tor
    sudo systemctl daemon-reload
    cd ~/torbox
    sudo apt-get install tor-geoipdb
    echo ""
    echo -e "${WHITE}[+] FINISHED! Tor is now updated!${NOCOLOR}"
    sleep 5
    #Return code for BOOTMSG / 1=reboot recommended / 0=no reboot needed
    return 1
  else
    if [ -d ~/debian-packages ] ; then sudo rm -r ~/debian-packages ; fi
  fi
}

#This function updates / resets TorBox's configuration files
update_torcfg()
{
  clear
  echo -e "${RED}[+] Copying TorBox's configuration files...${NOCOLOR}"
  if ! grep "torproject" /etc/apt/sources.list ; then
    sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
    sudo printf "\n# Added by TorBox update script\ndeb https://deb.torproject.org/torproject.org buster main\ndeb-src https://deb.torproject.org/torproject.org buster main\n" | sudo tee -a /etc/apt/sources.list
    echo -e "${RED}[+] Changed /etc/apt/sources.list -- backup done${NOCOLOR}"
  fi
  (sudo cp /etc/default/hostapd /etc/default/hostapd.bak) 2> /dev/null
  sudo cp etc/default/hostapd /etc/default/
  echo -e "${RED}[+] Copied /etc/default/hostapd -- backup done${NOCOLOR}"
  (sudo cp /etc/default/isc-dhcp-server /etc/default/isc-dhcp-server.bak) 2> /dev/null
  sudo cp etc/default/isc-dhcp-server /etc/default/
  echo -e "${RED}[+] Copied /etc/default/isc-dhcp-server -- backup done${NOCOLOR}"
  (sudo cp /etc/dhcp/dhclient.conf /etc/dhcp/dhclient.conf.bak) 2> /dev/null
  sudo cp etc/dhcp/dhclient.conf /etc/dhcp/
  echo -e "${RED}[+] Copied /etc/dhcp/dhclient.conf -- backup done${NOCOLOR}"
  (sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bak) 2> /dev/null
  sudo cp etc/dhcp/dhcpd.conf /etc/dhcp/
  echo -e "${RED}[+] Copied /etc/dhcp/dhcpd.conf -- backup done${NOCOLOR}"
  (sudo cp /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.conf.bak) 2> /dev/null
  sudo cp etc/hostapd/hostapd.conf /etc/hostapd/
  echo -e "${RED}[+] Copied /etc/hostapd/hostapd.conf -- backup done${NOCOLOR}"
  (sudo cp /etc/iptables.ipv4.nat /etc/iptables.ipv4.nat.bak) 2> /dev/null
  sudo cp etc/iptables.ipv4.nat /etc/
  echo -e "${RED}[+] Copied /etc/iptables.ipv4.nat -- backup done${NOCOLOR}"
  (sudo cp /etc/motd /etc/motd.bak) 2> /dev/null
  sudo cp etc/motd /etc/
  echo -e "${RED}[+] Copied /etc/motd -- backup done${NOCOLOR}"
  (sudo cp /etc/network/interfaces /etc/network/interfaces.bak) 2> /dev/null
  sudo cp etc/network/interfaces /etc/network/
  echo -e "${RED}[+] Copied /etc/network/interfaces -- backup done${NOCOLOR}"
  (sudo cp /etc/rc.local /etc/rc.local.bak) 2> /dev/null
  sudo cp etc/rc.local /etc/
  echo -e "${RED}[+] Copied /etc/rc.local -- backup done${NOCOLOR}"
  (sudo cp /etc/resolvconf.conf /etc/resolvconf.conf.bak) 2> /dev/null
  sudo cp etc/resolvconf.conf /etc/
  sudo resolvconf -u
  echo -e "${RED}[+] Copied /etc/resolvconf.conf -- backup done${NOCOLOR}"
  if grep -q "#net.ipv4.ip_forward=1" /etc/sysctl.conf ; then
    sudo cp /etc/sysctl.conf /etc/sysctl.conf.bak
    sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo -e "${RED}[+] Changed /etc/sysctl.conf -- backup done${NOCOLOR}"
  fi
  (sudo cp /etc/tor/torrc /etc/tor/torrc.bak) 2> /dev/null
  sudo cp etc/tor/torrc /etc/tor/
  echo -e "${RED}[+] Copied /etc/tor/torrc -- backup done${NOCOLOR}"
  echo -e "${RED}[+] Activating IP forwarding${NOCOLOR}"
  sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
  echo -e "${RED}[+] Changing .profile if necessary${NOCOLOR}"
  cd
  if ! grep "# Added by TorBox" .profile ; then
    sudo cp .profile .profile.bak
    sudo printf "\n# Added by TorBox\ncd torbox\nsleep 2\n./menu\n" | sudo tee -a .profile
  fi
  sudo cp etc/new_ident .
  echo -e "${RED}[+] Copied new_ident -- backup not necessary${NOCOLOR}"
  # This has to be at the end to avoid unnecessary error messages
  sudo cp /etc/hostname /etc/hostname.bak
  sudo cp etc/hostname /etc/
  echo -e "${RED}[+] Copied /etc/hostname -- backup done${NOCOLOR}"
  sudo cp /etc/hosts /etc/hosts.bak
  sudo cp etc/hosts /etc/
  echo -e "${RED}[+] Copied /etc/hosts -- backup done${NOCOLOR}"
  echo ""
  echo -e "${WHITE}[+] FINISHED! TorBox's configuration files are now updated / reset! ${NOCOLOR}"
  sleep 5
}

# This function updates the TorBox menu
update_torbox_menu()
{
  clear
  echo -e "${RED}[!] Starting with the update...${NOCOLOR}"
  PASSWORD=$(grep "^PASSWORD=" ${NEW_IDENT})
  cd
  echo -e "${RED}[+] Downloading TorBox menu from GitHub...${NOCOLOR}"
  wget https://github.com/radio24/TorBox/archive/refs/heads/master.zip
  if [ -e master.zip ]; then
    TORBOX_UPDATE=1
    echo -e "${RED}[+] Unpacking TorBox menu...${NOCOLOR}"
    unzip master.zip
    echo -e "${RED}[+] Removing the old one...${NOCOLOR}"
    rm -r torbox/*
    echo -e "${RED}[+] Moving the new one...${NOCOLOR}"
    mv TorBox-master/* torbox/
    echo -e "${RED}[+] Cleaning up...${NOCOLOR}"
    rm -r TorBox-master
    rm -r master.zip
    cd torbox
    sudo sed -i "s/^PASSWORD=.*/${PASSWORD}/g" ${NEW_IDENT}
    echo -e "${RED} ${NOCOLOR}"
    echo -e "${WHITE}[+] SUCCESS! TorBox menu is now updated!${NOCOLOR}"
    sleep 5
  else
    echo -e "${RED} ${NOCOLOR}"
    echo -e "${WHITE}[!] FAILED!${NOCOLOR}"
    echo -e "${WHITE}[!] Downloading TorBox menu from GitHub has failed !!${NOCOLOR}"
    echo -e "${WHITE}[!] I can't update TorBox menu !!${NOCOLOR}"
    echo -e "${WHITE}[!] You may try it later or manually !!${NOCOLOR}"
    sleep 5
  fi
}

# This function downloads, unpacks and installs the network drivers
# Syntax install_network_drivers <path> <filename> <text_message>
install_network_drivers()
{
	path=$1
  filename=$2
  text_message=$3
	clear
	cd ~
	mkdir install_network_driver
	cd install_network_driver
	echo -e "${RED}[+] Downloading $filename ${NOCOLOR}"
	wget http://downloads.fars-robotics.net/wifi-drivers/$path$filename
	echo -e "${RED}[+] Unpacking $filename ${NOCOLOR}"
	tar xzf $filename
	chmod a+x install.sh
	echo -e "${RED}[+] Installing the $text_message ${NOCOLOR}"
	sudo ./install.sh
	cd ~
	rm -r install_network_driver
	sleep 2
}


###### DISPLAY THE AVAILABLE OPTIONS ######
CHOICE=$(whiptail --nocancel --title "TorBox v.0.4.0 - UPDATE & RESET OPTIONS" --checklist --separate-output "Choose with SPACE and then press ENTER (ESC -> go back)" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
"1" "Update the base system (reboot recommended!)" OFF \
"2" "Update additional network drivers (reboot required!)" OFF \
"3" "Update the firmware of the RPI 4 (reboot required!)" OFF \
"4" "Update to the newest version of Tor" OFF \
"5" "Update to the newest stable version of the TorBox menu" OFF \
"6" "Erase all log files" OFF \
"7" "Erase all passwords in the Torbox Wireless Manager" OFF \
"8" "Update / Reset TorBox's configuration files (dangerous!)" OFF \
"9" "Reset Tor and force a change of the permanent entry node" OFF \
"10" "Remove permanently Bridge Relay data" OFF \
"11" "Just fixing and cleaning" OFF 3>&1 1>&2 2>&3)

exitstatus=$?

if [ $exitstatus = 0 ]; then
  mapfile -t CHOICE <<< "$CHOICE"
  for ARGUMENT in "${CHOICE[@]}"; do
    LOOP_NUMBER=$(( $LOOP_NUMBER + 1 ))
    if [ "$ARGUMENT" = "" ]; then
      exit 0
    fi

#This updates the base system
    if [ $ARGUMENT = 1 ]; then
      whiptail --title "TorBox - INFO" --textbox text/update-text $MENU_HEIGHT_25 $MENU_WIDTH
      clear
 			KERNEL_VERS=$(uname -s -r)
      TOR_VERS=$(tor --version|rev|cut -c2-|rev)
			INPUT="\nThis is the version of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nWould you like to update the base system to the newest version?"
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
        online_check_update
        clear
        sudo apt-get -y update
        sudo apt-get -y dist-upgrade
        sudo systemctl unmask hostapd
        sudo systemctl enable hostapd
        sudo systemctl enable isc-dhcp-server
        sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
        sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
        sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
        sudo systemctl enable tor
        sudo systemctl daemon-reload
        echo ""
        echo -e "${WHITE}[+] FINISHED! TorBox's base system is now updated!${NOCOLOR}"
        sleep 5
        BOOTMSG=1
      fi

# This updates additional network drivers
  elif [ $ARGUMENT = 2 ]; then
      kernelversion=$(uname -rv | cut -d ' ' -f1-2 | tr '+' ' ' | tr '#' ' ' | sed -e "s/[[:space:]]\+/-/g")
      if [ $LOOP_NUMBER = 1 ]; then
        INPUT=$(cat text/install_network_drivers-text)
        if (whiptail --defaultno --yesno "$INPUT" 16 $MENU_WIDTH); then
          path_8188eu="8188eu-drivers/"
          filename_8188eu="8188eu-"$kernelversion".tar.gz"
          text_filename_8188eu="Realtek RTL8188EU Wireless Network Driver"
          install_network_drivers $path_8188eu $filename_8188eu $text_filename_8188eu

          path_8188fu="8188fu-drivers/"
          filename_8188fu="8188fu-"$kernelversion".tar.gz"
          text_filename_8188fu="Realtek RTL8188FU Wireless Network Driver"
          install_network_drivers $path_8188fu $filename_8188fu $text_filename_8188fu

          path_8192eu="8192eu-drivers/"
          filename_8192eu="8192eu-"$kernelversion".tar.gz"
          text_filename_8192eu="Realtek RTL8192EU Wireless Network Driver"
          install_network_drivers $path_8192eu $filename_8192eu $text_filename_8192eu

          # Deactivated because no driver for new kernels available
          #path_8192su="8192su-drivers/"
          #filename_8192su="8192su-"$kernelversion".tar.gz"
          #text_filename_8192su="Realtek RTL8192SU Wireless Network Driver"
          #install_network_drivers $path_8192su $filename_8192su $text_filename_8192su

          path_8812au="8812au-drivers/"
          filename_8812au="8812au-"$kernelversion".tar.gz"
          text_filename_8812au="Realtek RTL8812AU Wireless Network Driver"
          install_network_drivers $path_8812au $filename_8812au $text_filename_8812au

          path_8821cu="8821cu-drivers/"
          filename_8821cu="8821cu-"$kernelversion".tar.gz"
          text_filename_8821cu="Realtek RTL8821CU Wireless Network Driver"
          install_network_drivers $path_8821cu $filename_8821cu $text_filename_8821cu

          path_8822bu="8822bu-drivers/"
          filename_8822bu="8822bu-"$kernelversion".tar.gz"
          text_filename_8822bu="Realtek RTL8822BU Wireless Network Driver"
          install_network_drivers $path_8822bu $filename_8822bu $text_filename_8822bu

          # Deactivated because no driver for new kernels available
          #path_mt7610="mt7610-drivers/"
          #filename_mt7610="mt7610-"$kernelversion".tar.gz"
          #text_filename_mt7610="Mediatek MT7610 Wireless Network Driver"
          #install_network_drivers $path_mt7610 $filename_mt7610 $text_filename_mt7610

          # Deactivated because no driver for new kernels available
          #path_mt7612="mt7612-drivers/"
          #filename_mt7612="mt7612-"$kernelversion".tar.gz"
          #text_filename_mt7612="Mediatek MT7610 Wireless Network Driver"
          #install_network_drivers $path_mt7612 $filename_mt7612 $text_filename_mt7612

          BOOTMSG=1
          LOOP_NUMBER=0
        fi
      else
        path_8188eu="8188eu-drivers/"
        filename_8188eu="8188eu-"$kernelversion".tar.gz"
        text_filename_8188eu="Realtek RTL8188EU Wireless Network Driver"
        install_network_drivers $path_8188eu $filename_8188eu $text_filename_8188eu

        path_8188fu="8188fu-drivers/"
        filename_8188fu="8188fu-"$kernelversion".tar.gz"
        text_filename_8188fu="Realtek RTL8188FU Wireless Network Driver"
        install_network_drivers $path_8188fu $filename_8188fu $text_filename_8188fu

        path_8192eu="8192eu-drivers/"
        filename_8192eu="8192eu-"$kernelversion".tar.gz"
        text_filename_8192eu="Realtek RTL8192EU Wireless Network Driver"
        install_network_drivers $path_8192eu $filename_8192eu $text_filename_8192eu

        # Deactivated because no driver for new kernels available
        #path_8192su="8192su-drivers/"
        #filename_8192su="8192su-"$kernelversion".tar.gz"
        #text_filename_8192su="Realtek RTL8192SU Wireless Network Driver"
        #install_network_drivers $path_8192su $filename_8192su $text_filename_8192su

        path_8812au="8812au-drivers/"
        filename_8812au="8812au-"$kernelversion".tar.gz"
        text_filename_8812au="Realtek RTL8812AU Wireless Network Driver"
        install_network_drivers $path_8812au $filename_8812au $text_filename_8812au

        path_8821cu="8821cu-drivers/"
        filename_8821cu="8821cu-"$kernelversion".tar.gz"
        text_filename_8821cu="Realtek RTL8821CU Wireless Network Driver"
        install_network_drivers $path_8821cu $filename_8821cu $text_filename_8821cu

        path_8822bu="8822bu-drivers/"
        filename_8822bu="8822bu-"$kernelversion".tar.gz"
        text_filename_8822bu="Realtek RTL8822BU Wireless Network Driver"
        install_network_drivers $path_8822bu $filename_8822bu $text_filename_8822bu

        # Deactivated because no driver for new kernels available
        #path_mt7610="mt7610-drivers/"
        #filename_mt7610="mt7610-"$kernelversion".tar.gz"
        #text_filename_mt7610="Mediatek MT7610 Wireless Network Driver"
        #install_network_drivers $path_mt7610 $filename_mt7610 $text_filename_mt7610

        # Deactivated because no driver for new kernels available
        #path_mt7612="mt7612-drivers/"
        #filename_mt7612="mt7612-"$kernelversion".tar.gz"
        #text_filename_mt7612="Mediatek MT7610 Wireless Network Driver"
        #install_network_drivers $path_mt7612 $filename_mt7612 $text_filename_mt7612

        BOOTMSG=1
        LOOP_NUMBER=0
      fi

#This updates the firmware on a RPI4
  elif [ $ARGUMENT = 3 ]; then
      if [ $LOOP_NUMBER = 1 ]; then
        INPUT=$(cat text/firmware_update-text)
        if (whiptail --defaultno --yesno "$INPUT" 16 $MENU_WIDTH); then
          update_firmware
          BOOTMSG=1
          LOOP_NUMBER=0
        fi
      else
        update_firmware
        BOOTMSG=1
        LOOP_NUMBER=0
      fi

#This updates TOR
  elif [ $ARGUMENT = 4 ]; then
      if [ $LOOP_NUMBER = 1 ]; then
        whiptail --title "TorBox - INFO" --textbox text/update-tor-text $MENU_HEIGHT_25 $MENU_WIDTH
        update_tor
        BOOTMSG=$?
      else
        update_tor
        BOOTMSG=$?
      fi

#This updates the newest stable version of TorBox's menu
  elif [ $ARGUMENT = 5 ]; then
      if [ $LOOP_NUMBER = 1 ]; then
        INPUT=$(cat text/torbox_update-text)
        if (whiptail --defaultno --yesno "$INPUT" 18 $MENU_WIDTH); then
          online_check_update
          update_torbox_menu
        fi
      else
        online_check_update
        update_torbox_menu
      fi
      exit 0

#This erases all log files
  elif [ $ARGUMENT = 6 ]; then
      clear
      erase_logs
      echo ""
      echo -e "${WHITE}[+] FINISHED! All log files erased!${NOCOLOR}"
      sleep 5

#Erase all passwords in Torbox Wireless Manager
  elif [ $ARGUMENT = 7 ]; then
      INPUT=$(cat text/erase_TWM_pwd-text)
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
        (head -n 2 /etc/wpa_supplicant/wpa_supplicant-wlan0.conf > /etc/wpa_supplicant/wpa_supplicant-wlan0.conf) 2> /dev/null
        (head -n 2 /etc/wpa_supplicant/wpa_supplicant-wlan1.conf > /etc/wpa_supplicant/wpa_supplicant-wlan1.conf) 2> /dev/null
      fi

#This updates / resets TorBox's configuration files
  elif [ $ARGUMENT = 8 ]; then
      if [ $TORBOX_UPDATE = 0 ]; then
        INPUT=$(cat text/torboxcfg_update-text)
        if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
          update_torcfg
          BOOTMSG=1
        fi
      else
        update_torcfg
        BOOTMSG=1
      fi

#This resets Tor and forces a change of the permanent entry node
  elif [ $ARGUMENT = 9 ]; then
      INPUT=$(cat text/tor-reset-text)
      if (whiptail --title "TorBox - INFO" --defaultno  --yesno "$INPUT" 18 $MENU_WIDTH); then
        clear
        MODE_BRIDGES=$(grep "UseBridges" ${TORRC})
        echo -e "${RED}[+] Stopping Tor...${NOCOLOR}"
        sudo systemctl stop tor
        sleep 2
        echo -e "${RED}[+] Deactivating Bridge mode or Bridge Relay...${NOCOLOR}"
        deactivating_bridge_relay
        if [ "$MODE_BRIDGES" = "UseBridges 1" ]; then
          sudo sed -i "s/^UseBridges/#UseBridges/g" ${TORRC}
          sudo sed -i "s/^UpdateBridgesFromAuthority/#UpdateBridgesFromAuthority/g" ${TORRC}
          sudo sed -i "s/^ClientTransport/#ClientTransport/g" ${TORRC}
          #Deaktivate all sort of bridges obfs4 and meek-azure
          sudo sed -i "s/^Bridge/#Bridge/g" ${TORRC}
        fi
        echo -e "${RED}[+] Deleting all circuits and forcing a change of the permanent entry node${NOCOLOR}"
        (sudo rm -r /var/lib/tor/cached-certs) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-consensus) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-descriptors) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-descriptors.new) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-microdesc-consensus) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-microdescs) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-microdescs.new) 2> /dev/null
        (sudo rm -r /var/lib/tor/diff-cache) 2> /dev/null
        (sudo rm -r /var/lib/tor/lock) 2> /dev/null
        (sudo rm -r /var/lib/tor/state) 2> /dev/null
        sleep 2
        echo -e "${RED}[+] Resetting Tor statistics...${NOCOLOR}"
        sudo touch /var/log/tor/notices.log
        sudo chown debian-tor /var/log/tor/notices.log
        sleep 2
        restarting_tor update
      fi

#This permanently removes Bridge Relay data
  elif [ $ARGUMENT = 10 ]; then
      INPUT=$(cat text/remove-brdata-text)
      if (whiptail --title "TorBox - INFO" --defaultno  --yesno "$INPUT" 18 $MENU_WIDTH); then
        clear
        echo -e "${RED}[+] Deactivating Bridge mode or Bridge Relay...${NOCOLOR}"
        deactivating_bridge_relay
        echo -e "${RED}[+] Removing Bridge Relay data${NOCOLOR}"
        (sudo rm -r /var/lib/tor/keys) 2> /dev/null
        (sudo rm /var/lib/tor/fingerprint) 2> /dev/null
        (sudo rm /var/lib/tor/hashed-fingerprint) 2> /dev/null
        (sudo rm -r /var/lib/tor/pt_state) 2> /dev/null
        sleep 2
        restarting_tor update
      fi

#Just fixing and cleaning
  elif [ $ARGUMENT = 11 ]; then
       clear
    fi
  done

# Fixing and Cleaning - Regardless of whether something has been changed or not. Just to be sure that all works properly.
  clear
  echo -e "${RED}[+] Set the correct time...${NOCOLOR}"
  sudo /usr/sbin/ntpdate pool.ntp.org
  sleep 3
  echo " "
  echo -e "${RED}[+] Fixing and cleaning...${NOCOLOR}"
  sudo apt --fix-broken install
  sudo apt-get -y clean; sudo apt-get -y autoclean; sudo apt-get -y autoremove
  sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
  sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
  sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
  sudo systemctl daemon-reload
  sleep 3
  if [ $BOOTMSG = 1 ]; then recommended_reboot; fi
else
  clear
  exit 0
fi
bash update
exit 0
