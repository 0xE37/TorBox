#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2019 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file sets all preconditions and defines all iptables rules to route the
# entire data stream from the connected clients through the Tor network.
#
# SYNTAX
# ./set_interfaces <outgoing interface> <incoming interface> <captive portal>
#
#
# The <outgoing interface> is the door to the internet. Possible values for the <outgoing interface>:
#
# eth0  -> 	TorBox is connected to the internet with a cable (WIRELESS MODE).
# eth1  -> 	TorBox is connected to the internet with a cable (CABLE MODE) or with a tethering device.
# wlan0 ->  TorBox is connected to the Internet through a wireless network (CABLE MODE).
# wlan1 -> 	TorBox is connected to the Internet through a wireless network (WIRELESS MODE).
#
# The <incoming interface> is where the client-device is connected to the TorBox. Possible values for the <incoming interface>:
#
# eth0  -> 	The device is connected with a cable.        -> CABLE MODE
# wlan0 -> 	The device is connected via wireless network -> WIRELESS MODE
#
# Possible values for <captive portal>:
#
# 0	->	The network connection is open -- no login/password/phone number etc. is required.
# 1	->	For a sucessful connection to the Internet login/password/phone number etc. is required (this is usually the case
#       with provider of free wireless network access in hotels, airports, Internet cafÃ©es etc.).
#
###### SET VARIABLES ######
#
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15
IPTABLES="/sbin/iptables"
MODPROBE="/sbin/modprobe"
WLAN_MANAGER="/usr/bin/wicd-curses"
WLAN_MANAGER_DAEMON_NAME="wicd"
MY_OWN_IP="192.168.42.1"
INT_NET=$MY_OWN_IP/8
O_DEVICE=$1
I_DEVICE=$2
CAPTIVE=$3

###########################

###### WE WILL DEACTIVATE BRIDGE RELAY MODE FIRST ######
clear
sudo bash deactivating_bridge_relay

###### ADDITIONAL COMMANDS DEPENDED ON THE INTERFACE CONNECTED TO THE INTERNET ######
if [ "$O_DEVICE" = "eth0" ]; then
	if [ $CAPTIVE = 1 ]; then
		sudo bash set_captive $O_DEVICE $I_DEVICE
	fi
elif [ "$O_DEVICE" = "eth1" ]; then
	if [ $CAPTIVE = 1 ]; then
    sudo bash set_captive $O_DEVICE $I_DEVICE
	fi
elif [ "$O_DEVICE" = "wlan0" ]; then
	clear
	whiptail --title "TorBox - INFO (scroll down!)" --textbox text/wicd-text --scrolltext $MENU_HEIGHT_25 $MENU_WIDTH
	service $WLAN_MANAGER_DAEMON_NAME restart
	echo "[+] Waiting for the WLAN Manager..."
	sleep 5
	$WLAN_MANAGER
	clear
	if [ $CAPTIVE = 1 ]; then
	   sudo bash set_captive $O_DEVICE $I_DEVICE
	fi
elif [ "$O_DEVICE" = "wlan1" ]; then
	clear
	whiptail --title "TorBox - INFO (scroll down!)" --textbox text/wicd-text --scrolltext $MENU_HEIGHT_25 $MENU_WIDTH
	service $WLAN_MANAGER_DAEMON_NAME restart
	echo "[+] Waiting for the WLAN Manager..."
	sleep 5
	$WLAN_MANAGER
	clear
	if [ $CAPTIVE = 1 ]; then
	   sudo bash set_captive $O_DEVICE $I_DEVICE
	fi
fi

###### PREPARATIONS ######
echo "[+] Flushing existing iptables rules..."
$IPTABLES -F
$IPTABLES -F -t nat
$IPTABLES -X
$IPTABLES -P INPUT DROP
$IPTABLES -P OUTPUT ACCEPT
$IPTABLES -P FORWARD DROP
$MODPROBE ip_conntrack
$MODPROBE iptable_nat
$MODPROBE ip_conntrack_ftp
$MODPROBE ip_nat_ftp

###### INPUT chain ######
echo "[+] Setting up INPUT chain..."
# State tracking rules
$IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPTABLES -A INPUT -m state --state INVALID -j DROP
# Anti-spoofing rules
$IPTABLES -A INPUT -i $I_DEVICE ! -s $INT_NET -j LOG --log-prefix "SPOOFED PKT "
$IPTABLES -A INPUT -i $I_DEVICE ! -s $INT_NET -j DROP
# Let packages to the localhost
$IPTABLES -A INPUT -i lo -j ACCEPT
# Open access from the internal network (usually my own devices)
$IPTABLES -A INPUT -i $I_DEVICE -j ACCEPT
# Allow ICMP Ping
$IPTABLES -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
$IPTABLES -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT

###### OUTPUT chain ######
echo "[+] Setting up OUTPUT chain..."
# Avoid Linux kernel transproxy packet leak. See: https://lists.torproject.org/pipermail/tor-talk/2014-March/032507.html
$IPTABLES -A OUTPUT -m conntrack --ctstate INVALID -j DROP
$IPTABLES -A OUTPUT -m state --state INVALID -j DROP
#$IPTABLES -A OUTPUT ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,FIN ACK,FIN -j DROP    --> This rule slows the traffic down and blocks some tools
$IPTABLES -A OUTPUT ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,RST ACK,RST -j DROP
## I will be absolutely sure that no DNS requests are done outside Tor --> this will be visible in the log (but we don't block it yet)
$IPTABLES -A OUTPUT -o $O_DEVICE -p tcp --dport 53 -j LOG --log-prefix "SSH SHELL DNS-REQUEST TCP" --log-ip-options --log-tcp-options
$IPTABLES -A OUTPUT -o $O_DEVICE -p udp --dport 53 -j LOG --log-prefix "SSH SHELL DNS-REQUEST UDP" --log-ip-options
## No other restrictions for OUTPUT

###### FORWARD chain ######
echo "[+] Setting up FORWARD chain..."
# State tracking rules
$IPTABLES -A FORWARD -m state --state INVALID -j DROP
# Allow ICMP Ping
$IPTABLES -A FORWARD -p icmp --icmp-type echo-request -j ACCEPT
$IPTABLES -A FORWARD -p icmp --icmp-type echo-reply -j ACCEPT

###### NAT rules ######
# Access on the box's own IP should be granted (only TCP)
$IPTABLES -t nat -A PREROUTING -i $I_DEVICE -d $MY_OWN_IP -p tcp -j REDIRECT
# TCP/UDP/DNS over Tor
$IPTABLES -t nat -A PREROUTING -i $I_DEVICE -p tcp -j REDIRECT --to-ports 9040
$IPTABLES -t nat -A PREROUTING -i $I_DEVICE -p udp --dport 53 -j REDIRECT --to-ports 9053
$IPTABLES -t nat -A PREROUTING -i $I_DEVICE -p udp -j REDIRECT --to-ports 9040
## Masquerading
$IPTABLES -t nat -A POSTROUTING -o $O_DEVICE -j MASQUERADE

###### FINISH ######
echo "[+] Restarting TOR..."
sleep 5
sudo service tor restart
sleep 5
