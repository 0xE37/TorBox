#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2021 Patrick Truffer
# Contact: anonym@torbox.ch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file is a library for the TorBox menu.
# It contains functions which are used in several scripts.
# Hopefully, this way the scripts stay short and clear.
#
# SYNTAX
# source lib/torbox.lib
#
#
##### SET VARIABLES ######
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"

#Connectivity check
CHECK_URL=$(grep "^PING_SERVER=" ${RUNFILE} | cut -c13-) 2> /dev/null

##############################
######## FUNCTIONS ###########

# check_tor()
# Used predefined variables: RED, NOCOLOR
# This function checks the status on https://check.torproject.org/
check_tor()
{
clear
echo -e "${RED}[+] Checking connectivity to the Tor network - please wait...${NOCOLOR}"
TOR_SERVICE=$(curl --socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 -m 5 -s https://check.torproject.org/ | cat | grep -m 1 Congratulations | xargs)
TOR_SERVICE=$(cut -d "." -f1 <<< $TOR_SERVICE)

if [ "$TOR_SERVICE" = "Congratulations" ]; then
  TOR_STATUS="TOR is working"
else
  TOR_STATUS=""
fi
clear
}

# finish()
# Used predefined variables: RUNFILE, MENU_HEIGHT_25 MENU_WIDTH
# This function displays, if we have a working connection to the Tor network
finish()
{
EXITID=$(grep "^EXITID=" ${RUNFILE})
if [ $EXITID = "EXITID=0" ]; then
  sleep 4
  check_tor
  if [ "$TOR_STATUS" = "TOR is working" ]; then
    whiptail --title "TorBox - INFO (scroll down!)" --textbox --scrolltext text/finish-ok-text $MENU_HEIGHT_25 $MENU_WIDTH
  else
    whiptail --title "TorBox - INFO (scroll down!)" --textbox --scrolltext text/finish-fail-text $MENU_HEIGHT_25 $MENU_WIDTH
  fi
else
  EXITID="EXITID=0"
  sudo sed -i "s/^EXITID=.*/${EXITID}/" ${RUNFILE}
fi
}

# online_check()
# Syntax online_check <source_script>
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15 MENU_WIDTH
# This function checks the internet connection and exits to <source_script> if none.
online_check()
{
  clear
  echo -e "${RED}[+] Checking internet connectivity - please wait...${NOCOLOR}"
  JUMPTO=$1
  clear
  #-m 6 must not be lower, otherwise it looks like there is no connection!
  OCHECK=$(curl --socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 -m 6 -s $CHECK_URL)
  if [ $? == 0 ]; then OCHECK="0"; else OCHECK="1"; fi
  if [ $OCHECK == 1 ]; then
    OCHECK=$(curl -m 6 -s $CHECK_URL)
    if [ $? == 0 ]; then OCHECK="0"; else OCHECK="1"; fi
  fi
  if [ $OCHECK == 1 ]; then
    whiptail --title "TorBox - INFO" --msgbox "\n\nIt seems that your TorBox is not properly connected to the internet! For this operation, TorBox has to properly connected with the internet!" $MENU_HEIGHT_15 $MENU_WIDTH
    trap "bash $JUMPTO; exit 0" EXIT
    exit 0
  fi
}

# add_open_dns()
# Syntax add_open_dns
# Used predefined variables: RED, NOCOLOR, RUNFILE
# This function adds some open nameservers to avoid cheap censorship mechanisms.
add_open_dns()
{
  echo -e "${RED}[+] Let's add some open nameservers to avoid cheap censorship mechanisms...${NOCOLOR}"
  echo -e "${RED}[+] These nameservers are only used for local resolution. All clients DNS resquest are handled through Tor.${NOCOLOR}"
  echo " "
  NAMESERVERS=$(grep "^NAMESERVERS=" ${RUNFILE} | cut -c13-) 2> /dev/null
  ONE_NAMESERVER=$(cut -d ',' -f1 <<< $NAMESERVERS)
  NAMESERVERS=$(cut -f2- -d ',' <<< $NAMESERVERS)
  i=0
  while [ "$ONE_NAMESERVER" != " " ]
  do
    if [ $i = 0 ]; then
      (sudo cp /etc/resolv.conf /etc/resolv.conf.bak) 2> /dev/null
      (printf "# Generated by TorBox instead of resolvconf\n" | sudo tee /etc/resolv.conf) 2> /dev/null
    fi
    (printf "nameserver $ONE_NAMESERVER\n" | sudo tee -a /etc/resolv.conf) 2> /dev/null
    i=$(($i + 1))
    if [ "$ONE_NAMESERVER" = "$NAMESERVERS" ]; then
      ONE_NAMESERVER=" "
    else
      ONE_NAMESERVER=$(cut -d ',' -f1 <<< $NAMESERVERS)
      NAMESERVERS=$(cut -f2- -d ',' <<< $NAMESERVERS)
    fi
  done
}

# erase_logs()
# Used predefined variables: RED, NOCOLOR
# This function flushes all LOG-files in /var/log and ~/.bash_history.
erase_logs()
{
  echo -e "${RED}[+] Erasing ALL LOG-files...${NOCOLOR}"
  for logs in `sudo find /var/log -type f`; do
  	echo -e "${RED}[+]${NOCOLOR} Erasing $logs"
  	sudo rm $logs
  	sleep 1
  done
  echo -e "${RED}[+]${NOCOLOR} Erasing .bash_history"
  (sudo rm ../.bash_history) 2> /dev/null
  history -c
}

# deactivating_bridge_relay()
# Used predefined variables: RED, NOCOLOR, TORRC
# This function deactivates the bridge relay.
deactivating_bridge_relay()
{
  MODE_BR=$(grep "BridgeRelay" ${TORRC})

  #The if clause below is necessary
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    echo -e "${RED}[+] Deactivating Bridge Relay Mode...${NOCOLOR}"
    ORPORT=$(grep "^ORPort" ${TORRC})
    OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC})
    sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
    sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)
  	sudo sed -i "s/^BridgeRelay/#BridgeRelay/g" ${TORRC}
  	sudo sed -i "s/^ORPort/#ORPort/g" ${TORRC}
  	sudo sed -i "s/^ExtORPort/#ExtORPort/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportPlugin/#ServerTransportPlugin/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportListenAddr/#ServerTransportListenAddr/g" ${TORRC}
  	sudo sed -i "s/^ContactInfo/#ContactInfo/g" ${TORRC}
  	sudo sed -i "s/^Nickname/#Nickname/g" ${TORRC}
  	sleep 2
    echo -e "${RED}[+] Closing port ORPort $sORPORT and OBFS4Port $sOBFS4PORT${NOCOLOR}"
  	sudo iptables -D INPUT -p tcp --dport $sORPORT -j ACCEPT
  	sudo iptables -D INPUT -p tcp --dport $sOBFS4PORT -j ACCEPT
    sleep 2
  fi
}

# restarting_tor(<source script>)
# Used predefined variables: RED, NOCOLOR
# This function restarts Tor
restarting_tor()
{
  SOURCE_SCRIPT=$1
  echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
  sudo systemctl restart tor &
  echo -e "${RED}[+] DONE! Checking progress - please be patient!${NOCOLOR}"
  echo -e "    Ignore any error messages, just wait..."
  echo -e "    At the end, you should see \"Bootstrapped 100%: Done\"."
  echo -e "    You can leave the progress report with CTRL-C."
  echo ""
  sleep 2
  trap "bash $SOURCE_SCRIPT; exit 0" SIGINT
  sudo tail -f -n 0 /var/log/tor/notices.log
}

# connecting_to_VPN()
# Used predefined variables: RED, WHITE, NOCOLOR, MENU_HEIGHT_15, MENU_WIDTH_REDUX
# This function connects the TorBox to a VPN
connecting_to_VPN()
{
  clear
  readarray -t ovpnlist < <(ls -1X ../openvpn/*.ovpn | sed "s/..\/openvpn\///" | sed "s/.ovpn//")
  if [ "${ovpnlist[0]}" = "" ] ; then
    whiptail --title "TorBox - INFO" --textbox text/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
  ovpnlist_anzahl=${#ovpnlist[*]}
  anzahl_loops=$(( $ovpnlist_anzahl - 1 ))
  menu_content=""
  for (( i=0; i<=$anzahl_loops; i++ ))
  do
    menu_item=$(( $i + 1 ))
    menu_content="$menu_content${RED}$menu_item${NOCOLOR} - ${ovpnlist[$i]}\n"
  done
  clear
  echo -e "${WHITE}Choose an OpenVPN configuration:${NOCOLOR}"
  echo ""
  echo -e "$menu_content"
  echo ""
  read -r -p $'\e[1;37mWhich OpenVPN configuration (number) would you like to use? -> \e[0m'
  echo
  if [[ $REPLY =~ ^[1234567890]$ ]] ; then
    CHOICE_OVPN=$(( $REPLY - 1 ))
    clear
    echo -e "${RED}[+] Connecting OpenVPN server...${NOCOLOR}"
    echo ""
    ovpn_file=../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    sudo sed -i "s/^dev tun.*/dev tun0/" ${ovpn_file}
    sudo openvpn --daemon --config ../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    echo ""
    echo -e "${RED}[+] Please wait, we need 15 second to configure the interface...${NOCOLOR}"
    sleep 15
  else
    sudo /sbin/iptables-restore < /etc/iptables.ipv4.nat
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
}

# recommended_reboot(<trap-destination>)
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15, MENU_WIDTH_REDUX
# This function strongly recommends a reboot
recommended_reboot()
{
  TRAP_DESTINATION=$1
  if (whiptail --title "TorBox - INFO" --yes-button "REBOOT" --yesno "A reboot of the system is not only recomendend, but necessary!" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX) ; then
    clear
    echo -e "${RED}[+] Rebooting TorBox...${NOCOLOR}"
    sleep 2
    sudo reboot
  else
    if [ "$TRAP_DESTINATION" = "" ] ; then
      clear
      exit 0
    else
      trap "cd ~/torbox; bash $TRAP_DESTINATION; exit 0" SIGINT
    fi
  fi
}

# number_of_bridges()
# Used predefined variables: TORRC
# How many OBFS4 bridges do we have? readarray reads into an array beginning with index 0
# Following variables can be used:
# $configured_bridges_deactivated -> An array with all deactivated OBFS4 bridges
# $configured_bridges_activated -> An array with all activated OBFS4 bridges
# $number_configured_bridges_deactivated -> Number of deactivated bridges
# $number_configured_bridges_activated -> Number of activated bridges
# $number_configured_bridges_total -> Total number of bridges
number_of_bridges()
{
  readarray -t configured_bridges_deactivated < <(grep "^#Bridge obfs4 " ${TORRC})
  readarray -t configured_bridges_activated < <(grep "^Bridge obfs4 " ${TORRC})
  if [ ${#configured_bridges_deactivated[0]} = 0 ]; then
    number_configured_bridges_deactivated=0
  else
    number_configured_bridges_deactivated=${#configured_bridges_deactivated[*]}
  fi
  if [ ${#configured_bridges_activated[0]} = 0 ]; then
    number_configured_bridges_activated=0
  else
    number_configured_bridges_activated=${#configured_bridges_activated[*]}
  fi
  number_configured_bridges_total=$(( $number_configured_bridges_deactivated + $number_configured_bridges_activated ))
}

# list_all_obfs4_bridges()
# Used predefined variables: RED, NOCOLOR, WHITE, GREEN
# Used predefined function: number_of_bridges()
# List all OBFS4 bridges
list_all_obfs4_bridges()
{
  BRIDGE_DB_URL="https://onionoo.torproject.org"
  clear
  add_open_dns
  echo ""
  echo -e "${RED}[+] Checking connectivity to the bridge database - please wait...${NOCOLOR}"
  #-m 6 must not be lower, otherwise it looks like there is no connection!
  OCHECK=$(curl --socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 -m 6 -s $BRIDGE_DB_URL)
  if [ $? == 0 ]; then OCHECK="0"; else OCHECK="1"; fi
  if [ $OCHECK == 1 ]; then
    OCHECK=$(curl -m 6 -s $BRIDGE_DB_URL)
    if [ $? == 0 ]; then OCHECK="0"; else OCHECK="1"; fi
  fi
  if [ $OCHECK == 0 ]; then
    echo -e "${WHITE}[+] OK - we are connected with the bridge database${NOCOLOR}"
    sleep 2
  else
    echo -e "${WHITE}[!] SORRY! - no connection with the bridge database${NOCOLOR}"
    sleep 2
  fi
  number_of_bridges
  if [ $number_configured_bridges_deactivated -gt 0 ]; then
    echo " "
    echo " "
    echo -e "${RED}[+] DEACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    while [ $i -lt $number_configured_bridges_deactivated ]
    do
        bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_deactivated[$i]})
        if [ $OCHECK == 0 ]; then
          bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
          bridge_status=$(./bridges_check.py -f $bridge_hash)
          if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
          elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
          elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
        else bridge_status=" "
        fi
        i=$(( $i + 1 ))
        bridge_address="$i : $bridge_address $bridge_status"
        echo -e $bridge_address
    done
  fi
  if [ $number_configured_bridges_activated -gt 0 ]; then
    echo " "
    echo " "
    echo -e "${RED}[+] ACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    j=0
    while [ $j -lt $number_configured_bridges_activated ]
    do
        bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_activated[$j]})
        if [ $OCHECK == 0 ]; then
          bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
          bridge_status=$(./bridges_check.py -f $bridge_hash)
          if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
          elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
          elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
        else bridge_status=" "
        fi
        j=$(( $j + 1 ))
        n=$(( $i + $j ))
        bridge_address="${WHITE}$n : $bridge_address${NOCOLOR} $bridge_status"
        echo -e "$bridge_address"
    done
  fi
  if [ $number_configured_bridges_total = 0 ]; then
    echo " "
    echo " "
    echo -e "${WHITE}[!] SORRY! - there are no configured OBFS4 bridges!${NOCOLOR}"
  fi
  echo " "
  read -n 1 -s -r -p "Press any key to continue"
}

# deactivate_obfs4_bridges()
# Used predefined variables: TORRC
# Dectivates OBFS4 if the number of activated obfs4 bridge entries in torrc is 0
deactivate_obfs4_bridges()
{
  sudo sed -i "s/^UseBridges/#UseBridges/g" ${TORRC}
  sudo sed -i "s/^UpdateBridgesFromAuthority/#UpdateBridgesFromAuthority/g" ${TORRC}
  sudo sed -i "s/^ClientTransportPlugin meek_lite,obfs4/#ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
  sudo sed -i "s/^Bridge obfs4 /#Bridge obfs4 /g" ${TORRC}
}

# activate_obfs4_bridges(<source script>)
# Used predefined variables: TORRC
# Used predefined function: restarting_tor(), deactivate_obfs4_bridges()
# Activates OBFS4 if the number of activated obfs4 bridge entries in torrc is >0
activate_obfs4_bridges()
{
  SOURCE_SCRIPT=$1
  number_of_bridges
  if [ $number_configured_bridges_activated -gt 0 ]; then
    deactivating_bridge_relay
    sudo sed -i "s/^#UseBridges/UseBridges/g" ${TORRC}
    sudo sed -i "s/^#UpdateBridgesFromAuthority/UpdateBridgesFromAuthority/g" ${TORRC}
    sudo sed -i "s/^#ClientTransportPlugin meek_lite,obfs4/ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
    sudo sed -i "s/^ClientTransportPlugin snowflake /#ClientTransportPlugin snowflake /g" ${TORRC}
    sudo sed -i "s/^Bridge snowflake /#Bridge snowflake /g" ${TORRC}
    sudo sed -i "s/^Bridge meek_lite /#Bridge meek_lite /g" ${TORRC}
    INPUT=$(cat text/restart-tor-bridges-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      restarting_tor $SOURCE_SCRIPT
    else
      deactivate_obfs4_bridges
    fi
  fi
}
