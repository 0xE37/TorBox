#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2021 Patrick Truffer
# Contact: anonym@torbox.ch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file is a library for the TorBox menu.
# It contains functions which are used in several scripts.
# Hopefully, this way the scripts stay short and clear.
#
# SYNTAX
# source lib/torbox.lib
#
#
##### SET VARIABLES ######
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_20=20
MENU_HEIGHT_15=15

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"

#Connectivity check
CHECK_URL=$(grep "^PING_SERVER=" ${RUNFILE} | sed "s/.*=//g") 2> /dev/null

##############################
######## FUNCTIONS ###########

# check_tor()
# Used predefined variables: RED, NOCOLOR
# This function checks the status on https://check.torproject.org/api/ip
check_tor()
{
clear
echo -e "${RED}[+] Checking connectivity to the Tor network - please wait...${NOCOLOR}"
sleep 1
IS_TOR=$(curl --socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 -m 5 -s https://check.torproject.org/api/ip | grep -oP '"IsTor"\s*:\s*\K\w+')

if [ $IS_TOR = true ]; then
  TOR_STATUS="TOR is working"
else
  TOR_STATUS=""
fi
clear
}

# check_interface_with_internet()
# Used predefined variables: RED, NOCOLOR, RUNFILE
# This function tests from where the Internet is coming
# Following variables can be used: FLASH_*, CONNECTED
check_interface_with_internet()
{
CONNECTED=0
clear
echo -e "${RED}[+] Checking connectivity to the Internet - please wait...${NOCOLOR}"
sleep 1
IINTERFACE=""
IINTERFACE=$(sudo timeout 5 sudo route | grep -m 1 tun0 | tr -s " " | cut -d " " -f1)
if [ ! -z "$IINTERFACE" ] ; then
  VPN_STATUS="VPN is up"
  IIPTABLES=""
  IIPTABLES=$(sudo iptables -t nat -L -v | grep MASQUERADE | grep tun0)
else
  VPN_STATUS=""
fi
if [ "$IINTERFACE" = "0.0.0.0" ] && [ ! -z "$IIPTABLES" ] ; then
  FLASH_TUN0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=tun0/" ${RUNFILE}
  CONNECTED=1
else
  IINTERFACE=$(sudo timeout 5 sudo route | grep -m 1 default | tr -s " " | cut -d " " -f8)
  if [ "$IINTERFACE" = "eth0" ] ; then FLASH_ETH0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth0/" ${RUNFILE}; CONNECTED=1; fi
  if [ "$IINTERFACE" = "eth1" ] ; then FLASH_ETH1="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth1/" ${RUNFILE}; CONNECTED=1; fi
  if [ "$IINTERFACE" = "wlan0" ] ; then FLASH_WLAN0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan0/" ${RUNFILE}; CONNECTED=1; fi
  if [ "$IINTERFACE" = "wlan1" ] ; then FLASH_WLAN1="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan1/" ${RUNFILE}; CONNECTED=1; fi
  if [ "$IINTERFACE" = "usb0" ] ; then FLASH_USB0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}; CONNECTED=1; fi
  if [ "$IINTERFACE" = "usb0" ] ; then FLASH_USB0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}; CONNECTED=1; fi
  if [ "$IINTERFACE" = "ppp0" ] ; then FLASH_USB0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=ppp0/" ${RUNFILE}; fi
fi
}

# finish()
# Used predefined variables: RUNFILE, MENU_HEIGHT_25 MENU_WIDTH
# This function displays, if we have a working connection to the Tor network
finish()
{
EXITID=$(grep "^EXITID=" ${RUNFILE})
if [ $EXITID = "EXITID=0" ]; then
  sleep 4
  check_tor
  if [ "$TOR_STATUS" = "TOR is working" ]; then
    whiptail --title "TorBox - INFO (scroll down!)" --textbox --scrolltext text/finish-ok-text $MENU_HEIGHT_25 $MENU_WIDTH
  else
    whiptail --title "TorBox - INFO (scroll down!)" --textbox --scrolltext text/finish-fail-text $MENU_HEIGHT_25 $MENU_WIDTH
  fi
else
  EXITID="EXITID=0"
  sudo sed -i "s/^EXITID=.*/${EXITID}/" ${RUNFILE}
fi
}

# online_check()
# Syntax online_check [<check_url>] [<no_connection_warning>] [<clearnet_warning>]
# <check_url> -> Check if TorBox can reach this URL. If <check_url> is missing or "default", the URL defined under "PING_SERVER=" in run/torbox.run is used.
# <no_connection_warning> -> missing or 0 don't warn if no connection / 1 warn if no connection
# <clearnet_warning> -> missing or 0 doesn't warn and doesn't check clearnet - enforces tor connection only / 1 warn before accessing clearnet
# <no_connection_warning> missing && <clearnet_warning> missing -> checks ONLY clearnet
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15, MENU_HEIGHT_20, MENU_WIDTH
# This function checks the internet connection, if the connection made through tor or clearnet and if no connection, it exits to <source_script>.
# Following variables can be used:
# OCHECK = 0     -> No internet conection
# OCHECK = 1     -> Internet is connected
# TORCONNECT = 0 -> Connection through tor not possible
# TORCONNECT = 1 -> Connection through tor possible
# CLEARNET_DECISSION = 0 -> The calling script should not use clearnet (this is not really necessary, because the function will stop the execution).
# CLEARNET_DECISSION = 1 -> The calling script can use clearnet
online_check()
{
  # Define all variables
  CHECK_URL=$1
  if [ -z "$CHECK_URL" ] || [ "$CHECK_URL" == "default" ]; then
    CHECK_URL=$(grep "^PING_SERVER=" ${RUNFILE} | sed "s/.*=//g") 2> /dev/null
  fi
  NO_CONNECTION_WARNING=$2
  if [ -z $NO_CONNECTION_WARNING ]; then NO_CONNECTION_WARNING=0; fi
  CLEARNET_WARNING=$3
  if [ -z $CLEARNET_WARNING ]; then CLEARNET_WARNING=0; fi
  # Don't change it to "-z" !
  if [ "$NO_CONNECTION_WARNING" == "0" ] && [ "$CLEARNET_WARNING" == "0" ]; then
    CLEARNET_ONLY=1
  fi
  OCHECK=0
  TORCONNECT=0
  CLEARNET_DECISSION=0
  CLEARNET_ONLY=0

  # Start working!
  add_open_dns
  echo " "
  echo -e "${RED}[+] Please wait...${NOCOLOR}"
  sleep 15
  clear
  echo -e "${RED}[+] Checking internet connectivity - please wait...${NOCOLOR}"

  # Always executed until except if a not tor related URL wants to check the online status (used in menu-config and in update).
  # Don't change it to "-z" !
  if [ "$CLEARNET_ONLY" == "0" ]; then
    #-m 6 must not be lower, otherwise it looks like there is no connection! ALSO IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
    if curl --socks5 127.0.0.1:9050 --socks5-hostname 127.0.0.1:9050 -m 6 -s $CHECK_URL >/dev/null; then
      OCHECK=1
      TORCONNECT=1
    else
      sleep 10
      OCHECK=0
      TORCONNECT=0
      # Don't change it to "! -z" !
      if [ "$CLEARNET_WARNING" == "1" ]; then
        INPUT=$(cat text/clearnet_warning-text)
        if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
          CLEARNET_DECISSION=1
          if curl -m 6 -s $CHECK_URL >/dev/null; then
            OCHECK=1
            TORCONNECT=0
          else
            OCHECK=0
            TORCONNECT=0
          fi
        else
          CLEARNET_DECISSION=0
          OCHECK=0;
          TORCONNECT=0
        fi
      else
        CLEARNET_DECISSION=0
        OCHECK=0;
        TORCONNECT=0
      fi
    fi
  fi

# Only executed for not tor related URL (usually, in this case online_check was executed without options; used in menu-config and in update)
  if [ "$CLEARNET_ONLY" == "1" ]; then
    CLEARNET_DECISSION=1
    if curl -m 6 -s $CHECK_URL >/dev/null; then
      OCHECK=1
      TORCONNECT=0
    else
      OCHECK=0
      TORCONNECT=0
    fi
  fi

  # Don't change it to "-z" !
  if [ "$OCHECK" == "0" ] && [ "$NO_CONNECTION_WARNING" != "1" ]; then
    INPUT="It seems that your TorBox is not properly connected to the internet! For this operation, TorBox to be properly connected with the internet!\n\nAre you really sure to continue without proper internet connection (I guess, you know what you are doing)?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
      OCHECK=1
    fi
  fi
}

# add_open_dns()
# Syntax add_open_dns
# Used predefined variables: RED, NOCOLOR, RUNFILE
# This function adds some open nameservers to avoid cheap censorship mechanisms.
add_open_dns()
{
  echo -e "${RED}[+] Let's add some open nameservers to avoid cheap censorship mechanisms...${NOCOLOR}"
  echo -e "${RED}[+] These nameservers are only used for local resolution. All clients DNS${NOCOLOR}"
  echo -e "${RED}[+] resquest are handled through Tor.${NOCOLOR}"
  NAMESERVERS=$(grep "^NAMESERVERS=" ${RUNFILE} | sed "s/.*=//g") 2> /dev/null
  ONE_NAMESERVER=$(cut -d ',' -f1 <<< $NAMESERVERS)
  NAMESERVERS=$(cut -f2- -d ',' <<< $NAMESERVERS)
  i=0
  while [ "$ONE_NAMESERVER" != " " ]
  do
    if [ $i = 0 ]; then
      (sudo cp /etc/resolv.conf /etc/resolv.conf.bak) 2> /dev/null
      (printf "# Generated by TorBox instead of resolvconf\n" | sudo tee /etc/resolv.conf) &>/dev/null
    fi
    (printf %s"nameserver $ONE_NAMESERVER\n" | sudo tee -a /etc/resolv.conf) &>/dev/null
    i=$((i+1))
    if [ "$ONE_NAMESERVER" = "$NAMESERVERS" ]; then
      ONE_NAMESERVER=" "
    else
      ONE_NAMESERVER=$(cut -d ',' -f1 <<< $NAMESERVERS)
      NAMESERVERS=$(cut -f2- -d ',' <<< $NAMESERVERS)
    fi
  done
}

# erase_logs()
# Used predefined variables: RED, NOCOLOR
# This function flushes all LOG-files in /var/log and ~/.bash_history.
erase_logs()
{
  echo -e "${RED}[+] Erasing ALL LOG-files...${NOCOLOR}"
  for logs in $(sudo find /var/log -type f); do
  	echo -e "${RED}[+]${NOCOLOR} Erasing $logs"
  	sudo rm $logs
  	sleep 1
  done
  echo -e "${RED}[+]${NOCOLOR} Erasing .bash_history"
  (sudo rm ../.bash_history) 2> /dev/null
  history -c
	(sudo -u debian-tor touch /var/log/tor/notices.log) 2> /dev/null
	(sudo chmod -R go-rwx /var/log/tor/notices.log) 2> /dev/null
	(sudo -u debian-tor touch /var/log/tor/vanguards.log) 2> /dev/null
	(sudo chmod -R go-rwx /var/log/tor/vanguards.log) 2> /dev/null
	echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
	sudo systemctl restart tor
	echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
}

# deactivating_bridge_relay()
# Used predefined variables: RED, NOCOLOR, TORRC
# This function deactivates the bridge relay.
deactivating_bridge_relay()
{
  MODE_BR=$(grep "BridgeRelay" ${TORRC})

  #The if clause below is necessary
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    echo -e "${RED}[+] Deactivating Bridge Relay Mode...${NOCOLOR}"
    ORPORT=$(grep "^ORPort" ${TORRC})
    OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC})
    sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
    sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)
  	sudo sed -i "s/^BridgeRelay/#BridgeRelay/g" ${TORRC}
  	sudo sed -i "s/^ORPort/#ORPort/g" ${TORRC}
  	sudo sed -i "s/^ExtORPort/#ExtORPort/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportPlugin/#ServerTransportPlugin/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportListenAddr/#ServerTransportListenAddr/g" ${TORRC}
  	sudo sed -i "s/^ContactInfo/#ContactInfo/g" ${TORRC}
  	sudo sed -i "s/^Nickname/#Nickname/g" ${TORRC}
    sudo sed -i "s/^BridgeDistribution/#BridgeDistribution/g" ${TORRC}
  	sleep 2
    echo -e "${RED}[+] Closing port ORPort $sORPORT and OBFS4Port $sOBFS4PORT${NOCOLOR}"
  	sudo iptables -D INPUT -p tcp --dport $sORPORT -j ACCEPT
  	sudo iptables -D INPUT -p tcp --dport $sOBFS4PORT -j ACCEPT
    sleep 2
  fi
}

# restarting_tor(<source script>)
# Used predefined variables: RED, NOCOLOR
# This function restarts Tor
restarting_tor()
{
  SOURCE_SCRIPT=$1
  echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
  echo -e "${RED}[+] DONE! Checking progress - please be patient!${NOCOLOR}"
  echo -e "    Ignore any error messages, this can take minutes just wait..."
  echo -e "    At the end, you should see \"Bootstrapped 100%: Done\"."
  echo -e "    You can leave the progress report with CTRL-C."
  echo ""
  trap "bash $SOURCE_SCRIPT; exit 0" SIGINT
  sudo systemctl restart tor &
  sudo tail -f -n 0 /var/log/tor/notices.log | sed -u 's#.*Bootstrapped 100% (done): Done#\x1b[97m&\x1b[0m#' | grep -v -e "You configured a non-loopback address" -e "opening log file" -e "Application request when we haven't"
}

# connecting_to_VPN()
# Used predefined variables: RED, WHITE, NOCOLOR, MENU_HEIGHT_15, MENU_WIDTH_REDUX
# This function connects the TorBox to a VPN
connecting_to_VPN()
{
  clear
  readarray -t ovpnlist < <(ls -1X ../openvpn/*.ovpn | sed "s/..\/openvpn\///" | sed "s/.ovpn//")
  if [ -z "${ovpnlist[0]}" ] ; then
    whiptail --title "TorBox - INFO" --textbox text/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
  ovpnlist_anzahl=${#ovpnlist[*]}
  anzahl_loops=$((ovpnlist_anzahl-1))
  menu_content=""
  for (( i=0; i<=anzahl_loops; i++ ))
  do
    menu_item=$((i+1))
    menu_content="$menu_content${RED}$menu_item${NOCOLOR} - ${ovpnlist[$i]}\n"
  done
  clear
  echo -e "${WHITE}Choose an OpenVPN configuration:${NOCOLOR}"
  echo ""
  echo -e "$menu_content"
  echo ""
  read -r -p $'\e[1;37mWhich OpenVPN configuration (number) would you like to use? -> \e[0m'
  echo
  if [[ $REPLY =~ ^[1234567890]$ ]] ; then
    CHOICE_OVPN=$((REPLY-1))
    clear
    echo -e "${RED}[+] Connecting OpenVPN server...${NOCOLOR}"
    echo ""
    ovpn_file=../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    sudo sed -i "s/^dev tun.*/dev tun0/" ${ovpn_file}
    sudo openvpn --daemon --config ../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    echo ""
    echo -e "${RED}[+] Please wait, we need 15 second to configure the interface...${NOCOLOR}"
    sleep 15
  else
    sudo /sbin/iptables-restore < /etc/iptables.ipv4.nat
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
}

# recommended_reboot(<trap-destination>)
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15, MENU_WIDTH_REDUX
# This function strongly recommends a reboot
recommended_reboot()
{
  TRAP_DESTINATION=$1
  if (whiptail --title "TorBox - INFO" --yes-button "REBOOT" --yesno "A reboot of the system is not only recomendend, but necessary!" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX) ; then
    clear
    echo -e "${RED}[+] Rebooting TorBox...${NOCOLOR}"
    sleep 2
    sudo reboot
  else
    if [ -z "$TRAP_DESTINATION" ] ; then
      clear
      exit 0
    else
      trap "cd ~/torbox; bash $TRAP_DESTINATION; exit 0" SIGINT
    fi
  fi
}

# number_of_bridges()
# Used predefined variables: TORRC
# How many OBFS4 bridges do we have? readarray reads into an array beginning with index 0
# Following variables can be used:
# $configured_bridges_deactivated -> An array with all deactivated OBFS4 bridges
# $configured_bridges_activated -> An array with all activated OBFS4 bridges
# $number_configured_bridges_deactivated -> Number of deactivated bridges
# $number_configured_bridges_activated -> Number of activated bridges
# $number_configured_bridges_total -> Total number of bridges
number_of_bridges()
{
  readarray -t configured_bridges_deactivated < <(grep "^#Bridge obfs4 " ${TORRC})
  readarray -t configured_bridges_activated < <(grep "^Bridge obfs4 " ${TORRC})
  if [ ${#configured_bridges_deactivated[0]} = 0 ]; then
    number_configured_bridges_deactivated=0
  else
    number_configured_bridges_deactivated=${#configured_bridges_deactivated[*]}
  fi
  if [ ${#configured_bridges_activated[0]} = 0 ]; then
    number_configured_bridges_activated=0
  else
    number_configured_bridges_activated=${#configured_bridges_activated[*]}
  fi
  number_configured_bridges_total=$((number_configured_bridges_deactivated+number_configured_bridges_activated))
}

# list_all_obfs4_bridges()
# Used predefined variables: RED, NOCOLOR, WHITE, GREEN
# Used predefined function: number_of_bridges()
# List all OBFS4 bridges
list_all_obfs4_bridges()
{
  BRIDGE_DB_URL="https://onionoo.torproject.org"
  clear
  online_check $BRIDGE_DB_URL 1 1
  clear
  if [ $OCHECK == 1 ]; then
    echo -e "${WHITE}[+] OK - we are connected with the bridge database${NOCOLOR}"
    sleep 2
  else
    echo -e "${WHITE}[!] SORRY! - no connection with the bridge database${NOCOLOR}"
    sleep 2
  fi
  number_of_bridges
  if [ $number_configured_bridges_deactivated -gt 0 ]; then
    echo " "
    echo " "
    echo -e "${RED}[+] DEACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    i=0
    while [ $i -lt $number_configured_bridges_deactivated ]
    do
        bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_deactivated[$i]})
        if [ $OCHECK == 1 ]; then
          bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
          if [ $CLEARNET_DECISSION == 1 ]; then
            bridge_status=$(./bridges_check.py -f $bridge_hash)
          else
            bridge_status=$(./bridges_check.py --network=tor -f $bridge_hash)
          fi
          if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
          elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
          elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST"
          fi
        else bridge_status=" "
        fi
        i=$((i+1))
        bridge_address="$i : $bridge_address $bridge_status"
        echo -e $bridge_address
    done
  fi
  if [ $number_configured_bridges_activated -gt 0 ]; then
    echo " "
    echo " "
    echo -e "${RED}[+] ACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    j=0
    while [ $j -lt $number_configured_bridges_activated ]
    do
        bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_activated[$j]})
        if [ $OCHECK == 1 ]; then
          bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
          if [ $CLEARNET_DECISSION == 1 ]; then
            bridge_status=$(./bridges_check.py -f $bridge_hash)
          else
            bridge_status=$(./bridges_check.py --network=tor -f $bridge_hash)
          fi
          if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
          elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
          elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
        else bridge_status=" "
        fi
        j=$((j+1))
        n=$((i+j))
        bridge_address="${WHITE}$n : $bridge_address${NOCOLOR} $bridge_status"
        echo -e "$bridge_address"
    done
  fi
  if [ "$number_configured_bridges_total" == "0" ]; then
    echo " "
    echo " "
    echo -e "${WHITE}[!] SORRY! - there are no configured OBFS4 bridges!${NOCOLOR}"
  fi
  echo " "
  read -n 1 -s -r -p "Press any key to continue"
}

# deactivate_obfs4_bridges()
# Used predefined variables: TORRC
# Dectivates OBFS4 if the number of activated obfs4 bridge entries in torrc is 0
deactivate_obfs4_bridges()
{
  sudo sed -i "s/^UseBridges/#UseBridges/g" ${TORRC}
  sudo sed -i "s/^UpdateBridgesFromAuthority/#UpdateBridgesFromAuthority/g" ${TORRC}
  sudo sed -i "s/^ClientTransportPlugin meek_lite,obfs4/#ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
  sudo sed -i "s/^Bridge obfs4 /#Bridge obfs4 /g" ${TORRC}
}

# activate_obfs4_bridges(<source script>)
# Used predefined variables: TORRC
# Used predefined function: restarting_tor(), deactivate_obfs4_bridges()
# Activates OBFS4 if the number of activated obfs4 bridge entries in torrc is >0
activate_obfs4_bridges()
{
  SOURCE_SCRIPT=$1
  number_of_bridges
  if [ $number_configured_bridges_activated -gt 0 ]; then
    deactivating_bridge_relay
    sudo sed -i "s/^#UseBridges/UseBridges/g" ${TORRC}
    sudo sed -i "s/^#UpdateBridgesFromAuthority/UpdateBridgesFromAuthority/g" ${TORRC}
    sudo sed -i "s/^#ClientTransportPlugin meek_lite,obfs4/ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
    sudo sed -i "s/^ClientTransportPlugin snowflake /#ClientTransportPlugin snowflake /g" ${TORRC}
    sudo sed -i "s/^Bridge snowflake /#Bridge snowflake /g" ${TORRC}
    sudo sed -i "s/^Bridge meek_lite /#Bridge meek_lite /g" ${TORRC}
    INPUT=$(cat text/restart-tor-bridges-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      restarting_tor $SOURCE_SCRIPT
    else
      deactivate_obfs4_bridges
    fi
  fi
}

# display_net_reconfiguration_info())
# Used predefined variables: RED, NOCOLOR, WHITE
# Displays information before reconfigure the network (only used several times in menu)
display_net_reconfiguration_info()
{
  clear
  echo ""
  echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
  echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
  echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
  echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
  echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
  echo -e "${RED}    disconnect and reconnect your client device from the TorBox${NOCOLOR}"
  echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
  echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
  echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
  echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
  echo -e "${RED}    source again (main menu 4-9),${NOCOLOR}"
  echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
  echo -e "${RED}    load the default values.${NOCOLOR}"
  echo ""
}
