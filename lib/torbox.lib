#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2020 Patrick Truffer
# Contact: anonym@torbox.ch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file is a library for the TorBox menu.
# It contains functions which are used in several scripts.
# Hopefully, this way the scripts stay short and clear.
#
# SYNTAX
# source lib/torbox.lib
#
#
##### SET VARIABLES ######
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"

##############################
######## FUNCTIONS ###########

# check_tor()
# Used predefined variables: RED, NOCOLOR
# This function checks the status on https://check.torproject.org/
check_tor()
{
clear
echo -e "${RED}[+] Checking connectivity to the Tor network - please wait...${NOCOLOR}"
TOR_SERVICE=$(curl --socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 -m 5 -s https://check.torproject.org/ | cat | grep -m 1 Congratulations | xargs)
TOR_SERVICE=$(cut -d "." -f1 <<< $TOR_SERVICE)

if [ "$TOR_SERVICE" = "Congratulations" ]; then
  TOR_STATUS="TOR is working"
else
  TOR_STATUS=""
fi
clear
}

# finish()
# Used predefined variables: RUNFILE, MENU_HEIGHT_25 MENU_WIDTH
# This function displays, if we have a working connection to the Tor network
finish()
{
EXITID=$(grep "^EXITID=" ${RUNFILE})
if [ $EXITID = "EXITID=0" ]; then
  sleep 4
  check_tor
  if [ "$TOR_STATUS" = "TOR is working" ]; then
    whiptail --title "TorBox - INFO (scroll down!)" --textbox --scrolltext text/finish-ok-text $MENU_HEIGHT_25 $MENU_WIDTH
  else
    whiptail --title "TorBox - INFO (scroll down!)" --textbox --scrolltext text/finish-fail-text $MENU_HEIGHT_25 $MENU_WIDTH
  fi
else
  EXITID="EXITID=0"
  sudo sed -i "s/^EXITID=.*/${EXITID}/" ${RUNFILE}
fi
}

# online_check()
# Syntax online_check <source_script>
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15 MENU_WIDTH
# This function checks the internet connection and exits to <source_script> if none.
online_check()
{
  clear
  echo -e "${RED}[+] Checking internet connectivity - please wait...${NOCOLOR}"
  JUMPTO=$1
  clear
  OCHECK=$(curl -m 5 -s http://google.com)
  if [ $? -gt 0 ]; then
    whiptail --title "TorBox - INFO" --msgbox "\n\nIt seems that your TorBox is not properly connected to the internet! For this operation, TorBox has to properly connected with the internet!" $MENU_HEIGHT_15 $MENU_WIDTH
    trap "bash $JUMPTO; exit 0" EXIT
    exit 0
  fi
}

# erase_logs()
# Used predefined variables: RED, NOCOLOR
# This function flushes all LOG-files in /var/log and ~/.bash_history.
erase_logs()
{
  echo -e "${RED}[+] Erasing ALL LOG-files...${NOCOLOR}"
  echo " "
  for logs in `sudo find /var/log -type f`; do
  	echo -e "${RED}[+]${NOCOLOR} Erasing $logs"
  	sudo rm $logs
  	sleep 1
  done
  echo -e "${RED}[+]${NOCOLOR} Erasing .bash_history"
  sudo rm ../.bash_history
  sudo history -c
}

# deactivating_bridge_relay()
# Used predefined variables: RED, NOCOLOR, TORRC
# This function deactivates the bridge relay.
deactivating_bridge_relay()
{
  MODE_BR=$(grep "BridgeRelay" ${TORRC})

  #The if clause below is necessary
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    echo -e "${RED}[+] Deactivating Bridge Relay Mode...${NOCOLOR}"
    ORPORT=$(grep "^ORPort" ${TORRC})
    OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC})
    sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
    sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)
  	sudo sed -i "s/^BridgeRelay/#BridgeRelay/g" ${TORRC}
  	sudo sed -i "s/^ORPort/#ORPort/g" ${TORRC}
  	sudo sed -i "s/^ExtORPort/#ExtORPort/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportPlugin/#ServerTransportPlugin/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportListenAddr/#ServerTransportListenAddr/g" ${TORRC}
  	sudo sed -i "s/^ContactInfo/#ContactInfo/g" ${TORRC}
  	sudo sed -i "s/^Nickname/#Nickname/g" ${TORRC}
  	sleep 2
      	echo -e "${RED}[+] Closing port ORPort $sORPORT and OBFS4Port $sOBFS4PORT${NOCOLOR}"
  	sudo iptables -D INPUT -p tcp --dport $sORPORT -j ACCEPT
  	sudo iptables -D INPUT -p tcp --dport $sOBFS4PORT -j ACCEPT
    sleep 2
  fi
}

# restarting_tor(<source script>)
# Used predefined variables: RED, NOCOLOR
# This function restarts Tor
restarting_tor()
{
  SOURCE_SCRIPT=$1
  echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
  sudo systemctl restart tor &
  echo -e "${RED}[+] DONE! Checking progress - please be patient!${NOCOLOR}"
  echo -e "    At the end, you should see \"Bootstrapped 100%: Done\"."
  echo -e "    You can leave the progress report with CTRL-C."
  echo ""
  sleep 2
  trap "bash $SOURCE_SCRIPT; exit 0" SIGINT
  sudo tail -f -n 0 /var/log/tor/notices.log
}

# restarting_tor(<source script>)
# Used predefined variables: RED, NOCOLOR
# This function restarts Tor
connecting_to_VPN()
{
  clear
  readarray -t ovpnlist < <(ls -1X ../openvpn/*.ovpn | sed "s/..\/openvpn\///" | sed "s/.ovpn//")
  if [ "${ovpnlist[0]}" = "" ] ; then
    whiptail --title "TorBox - INFO" --textbox text/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
  ovpnlist_anzahl=${#ovpnlist[*]}
  anzahl_loops=$(( $ovpnlist_anzahl - 1 ))
  menu_content=""
  for (( i=0; i<=$anzahl_loops; i++ ))
  do
    menu_item=$(( $i + 1 ))
    menu_content="$menu_content${RED}$menu_item${NOCOLOR} - ${ovpnlist[$i]}\n"
  done
  clear
  echo -e "${WHITE}Choose an OpenVPN configuration:${NOCOLOR}"
  echo ""
  echo -e "$menu_content"
  echo ""
  read -r -p $'\e[1;37mWhich OpenVPN configuration (number) would you like to use? -> \e[0m'
  echo
  if [[ $REPLY =~ ^[1234567890]$ ]] ; then
    CHOICE_OVPN=$(( $REPLY - 1 ))
    clear
    echo -e "${RED}[+] Connecting OpenVPN server...${NOCOLOR}"
    echo ""
    ovpn_file=../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    sudo sed -i "s/^dev tun.*/dev tun0/" ${ovpn_file}
    sudo openvpn --daemon --config ../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    echo ""
    echo -e "${RED}[+] Please wait, we need 15 second to configure the interface...${NOCOLOR}"
    sleep 15
  else
    sudo /sbin/iptables-restore < /etc/iptables.ipv4.nat
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
}
