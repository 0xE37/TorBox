#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2020 Patrick Truffer
# Contact: anonym@torbox.ch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file tries to fix all network-related problems, like wrong assigned IP
# addresses, issues with dhclient, hostapd, and others. It also restarts
# TorBox's wireless network (AP, hostapd) if we use a WLAN adapter as an AP,
# checks if the daemon is working, and, if not, resets the configuration with
# the last working version and restarts the daemon again. If nothing works,
# the configuration is set that way that after a restart, TorBox's wireless
# network can be found on wlan0.
#
# SYNTAX
# nohup ./hostapd_fallback_komplex <interface 1> <interface 2>
#
# <interface 1>: Is the interface with the AP: wlan0 or wlan1.
# <interface 2>: Is the interface with the connected cable client: eth0 or ethh1
#
#
##### SET VARIABLES ######

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
HOSTAPD="/etc/hostapd/hostapd.conf"
HOSTAPD_SAV="/etc/hostapd/hostapd.conf.tbx"
INTERFACE1=$1
INTERFACE2=$2

if [ $INTERFACE1 = wlan1 ] ; then
	INTERFACE3="wlan0"
else
	INTERFACE3="wlan1"
fi

if [ $INTERFACE2 = eth1 ] ; then
	INTERFACE4="eth0"
else
	INTERFACE4="eth1"
fi

# We don't want dhclient running on our clients
if ps -ax | grep "[d]hclient.$INTERFACE1" ; then
	(sudo dhclient -r) 2>&1
	sudo killall dhclient
	sudo rm /var/lib/dhcp/dhclient.$INTERFACE1.leases
	sudo ifdown $INTERFACE3
	sudo ifdown $INTERFACE4
	sudo ifdown usb0
	sudo ifup $INTERFACE3 &>/dev/null &
	sudo ifup $INTERFACE4 &>/dev/null &
	sudo ifup usb0 &>/dev/null &
fi

if ps -ax | grep "[d]hclient.$INTERFACE2" ; then
  (sudo dhclient -r) 2>&1
  sudo killall dhclient
	sudo rm /var/lib/dhcp/dhclient.$INTERFACE2.leases
	sudo ifdown $INTERFACE3
	sudo ifdown $INTERFACE4
	sudo ifdown usb0
	sudo ifup $INTERFACE3 &>/dev/null &
	sudo ifup $INTERFACE4 &>/dev/null &
	sudo ifup usb0 &>/dev/null &
fi

# Is INTERFACE1 ready?
STATICIP1=$(ip addr show $INTERFACE1 | grep -w inet)
# wlan0 or wlan1 doesn't have an IP address - we have to do something about it!
if [ -z "$STATICIP1" ] ; then
	sudo ifdown $INTERFACE1
	# Cannot be run in the background because then it jumps into the next if-then-else clause (still missing IP)
	sudo ifup $INTERFACE1  &>/dev/null
fi

STATICIP1=$(ip addr show $INTERFACE1 | grep -w 192.168.42.1)
# wlan0 or wlan1 is not acting as AP - we have to do something about it!
if [ -z "$STATICIP1" ] ; then
	if [ $INTERFACE1 = wlan1 ] ; then
		sudo cp ${HOSTAPD} ${HOSTAPD_SAV}
	fi
	sudo sed -i "s/^interface=$INTERFACE3/interface=$INTERFACE1/" ${HOSTAPD}
	sudo systemctl stop isc-dhcp-server
  (sudo dhclient -r) 2>&1
	sudo systemctl stop wicd
	sudo ifdown $INTERFACE1
	sudo ifdown $INTERFACE3
	sudo ifup $INTERFACE1 &>/dev/null &
	sudo systemctl restart hostapd
	sudo systemctl start isc-dhcp-server
	sudo ifup $INTERFACE3 &>/dev/null &
	sudo /sbin/iptables -F
	sudo /sbin/iptables -t nat -F
	sudo /sbin/iptables -P FORWARD DROP
	sudo /sbin/iptables -P INPUT ACCEPT
	sudo /sbin/iptables -P OUTPUT ACCEPT
	LOG_STATUS=$(sudo systemctl is-active hostapd)
	if [ $LOG_STATUS = activating ] || [ $LOG_STATUS = inactive ] ; then
		sudo sed -i "s/^hw_mode=a/hw_mode=g/" ${HOSTAPD}
		sudo sed -i "s/^channel=.*/channel=6/" ${HOSTAPD}
		sudo sed -i "s/^ht_capab=[HT40-][HT40+][SHORT-GI-20][SHORT-GI-40][DSSS_CCK-40]/#ht_capab=[HT40-][HT40+][SHORT-GI-20][SHORT-GI-40][DSSS_CCK-40]/" ${HOSTAPD}
		sudo sed -i "s/^vht_oper_chwidth=1/#vht_oper_chwidth=1/" ${HOSTAPD}
		sudo sed -i "s/^vht_oper_centr_freq_seg0_idx=42/#vht_oper_centr_freq_seg0_idx=42/" ${HOSTAPD}
		sudo systemctl restart hostapd
		sleep 5
	fi
	if [ $INTERFACE1 = wlan1 ] ; then
		sudo cp ${HOSTAPD_SAV} ${HOSTAPD}
		LOG_STATUS=$(sudo systemctl is-active hostapd)
		if [ $LOG_STATUS = activating ] || [ $LOG_STATUS = inactive ] ; then
			sudo cp etc/network/interfaces.wlan0$INTERFACE2 /etc/network/interfaces
			sudo systemctl restart hostapd
		fi
	fi
fi

# Is INTERFACE2 ready?
if ip link | grep $INTERFACE2 | grep "state UP" ; then
	STATICIP2=$(ip addr show $INTERFACE2 | grep -w 192.168.43.1)
	if [ -z "$STATICIP2" ] ; then
		sudo ifdown $INTERFACE2
#		sudo ifdown $INTERFACE4
		sudo ifup $INTERFACE2 &>/dev/null &
		sudo systemctl restart isc-dhcp-server
#		sudo ifup $INTERFACE4 &>/dev/null &
	fi
else
		sudo ifdown $INTERFACE2
		sudo ifup $INTERFACE2 &>/dev/null &
fi

# Is INTERFACE3 ready?
if ip link | grep $INTERFACE3 | grep "state UP" ; then
	STATICIP3=$(ip addr show $INTERFACE3 | grep -w inet)
	if [ -z "$STATICIP3" ] ; then
		sudo ifdown $INTERFACE3
#		(sudo dhclient -r) 2>&1
		sudo ifup $INTERFACE3 &>/dev/null &
	fi
	STATICIP3=$(ip addr show $INTERFACE3 | grep 192.168.42.1)
	if [ -n "$STATICIP3" ] ; then
		sudo ifdown $INTERFACE3
#		(sudo dhclient -r) 2>&1
		sudo ifup $INTERFACE3 &>/dev/null &
	fi
else
		sudo ifdown $INTERFACE3
		sudo ifup $INTERFACE3 &>/dev/null &
fi

# Is INTERFACE4 ready?
if ip link | grep $INTERFACE4 | grep "state UP" ; then
	STATICIP4=$(ip addr show $INTERFACE4 | grep -w inet)
	if [ -z "$STATICIP4" ] ; then
		(sudo dhclient -r) 2>&1
		sudo ifdown $INTERFACE4
		sudo ifup $INTERFACE4 &>/dev/null &
	fi
	STATICIP4=$(ip addr show $INTERFACE4 | grep 192.168.43.1)
	if [ -n "$STATICIP4" ] ; then
		(sudo dhclient -r) 2>&1
		sudo ifdown $INTERFACE4
		sudo ifup $INTERFACE4 &>/dev/null &
	fi
else
		sudo ifdown $INTERFACE4
		sudo ifup $INTERFACE4 &>/dev/null &
fi
