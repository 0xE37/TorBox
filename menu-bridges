#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2021 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file displays the bridges menu and executes all relevant scripts.
#
# SYNTAX
# ./menu-bridges
#
#
###### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=13
#
# How many lines are only for decoration and spaces?
NO_SPACER=4
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_15=15
MENU_HEIGHT_20=20
MENU_HEIGHT_25=25
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+$NO_SPACER))

#Colors
RED='\033[1;31m'
GREEN='\033[1;32m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
PING_SERVER="google.com"
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"
BAK="/etc/tor/torrc.bak"
TMP="/tmp/torrc.tmp"
i=0
j=0


###########################
######## FUNCTIONS ########

# include lib
.  lib/torbox.lib

# This function imports the configuration and makes some preparations
read_config()
{
  # OBFS4STRING represents the status of the Meek-Azure bridging mode
  MODE_OBFS4=$(grep -o "^Bridge obfs4 " ${TORRC})
  if [ "$MODE_OBFS4" = "Bridge obfs4 " ]; then
      OBFS4STRING="ON!"
      OBFS4STRINGb="Deactivate"
      BRIDGESTRING="OBFS4 ON!"
  else
      OBFS4STRING="OFF"
      OBFS4STRINGb="Activate"
  fi

  # MEEKSTRING represents the status of the Meek-Azure bridging mode
  MODE_MEEK=$(grep -o "^Bridge meek_lite " ${TORRC})
  if [ "$MODE_MEEK" = "Bridge meek_lite " ]; then
      MEEKSTRING="ON!"
      MEEKSTRINGb="Deactivate"
      BRIDGESTRING="MEEK-AZURE ON!"
  else
      MEEKSTRING="OFF"
      MEEKSTRINGb="Activate"
  fi

  # SNOWSTRING represents the status of the Snowflake bridging mode
  MODE_SNOW=$(grep -o "^Bridge snowflake " ${TORRC})
  if [ "$MODE_SNOW" = "Bridge snowflake " ]; then
      SNOWSTRING="ON!"
      SNOWSTRINGb="Deactivate"
      BRIDGESTRING="SNOWFLAKE ON!"
  else
      SNOWSTRING="OFF"
      SNOWSTRINGb="Activate"
  fi

  BRIDGEMODE="Bridge:"
  if [ "${BRIDGESTRING}" = " " ]; then
    BRIDGESTRING="OFF"
  fi

  # TOGGLE05 / TOGGLE06 represents the status of the bridging mode
  MODE_BRIDGES=$(grep "^UseBridges" ${TORRC})
  if [ "$MODE_BRIDGES" = "UseBridges 1" ] && [ "$MODE_MEEK" != "Bridge meek_lite " ] && [ "$MODE_SNOW" != "Bridge snowflake " ]; then
      TOGGLE05="ON!]==="
      TOGGLE05b="ON"
      TOGGLE06="OFF]==="
      TOGGLE06b="OFF"
  else
      TOGGLE05="OFF]==="
      TOGGLE05b="OFF"
      TOGGLE06="ON!]==="
      TOGGLE06b="ON"
  fi

  # Is TorBox connected to a VPN?
  tun0up=$(ip link | grep tun0)
  if [ "$tun0up" = "" ]; then
    VPNSTRING1="Connect"
    VPNSTRING2="to"
  else
    VPNSTRING1="Disconnect"
    VPNSTRING2="from"
  fi

  # Is the Countermeasure against a disconnection when idle feature active?
    if ps -ax | grep "[p]ing -q $PING_SERVER" ; then
      PING="ON"
    else
      PING="OFF"
    fi

  # NECESSARY FOR THE DEACTIVATION OF THE BRIDGE RELAY
  sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
  sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)

  # number_of_bridges()
  # How many OBFS4 bridges do we have? readarray reads into an array beginning with index 0
  # Following variables can be used:
  # $configured_bridges_deactivated -> An array with all deactivated OBFS4 bridges
  # $configured_bridges_activated -> An array with all activated OBFS4 bridges
  # $number_configured_bridges_deactivated -> Number of deactivated bridges
  # $number_configured_bridges_activated -> Number of activated bridges
  # $number_configured_bridges_total -> Total number of bridges
  number_of_bridges
}

######## PREPARATIONS ########
read_config

###### DISPLAY THE MENU ######
clear

CHOICE=$(whiptail --cancel-button "Back" --title "TorBox v.0.4.0 - COUNTERMEASURE MENU" --menu "Choose an option (ESC -> back to the main menu)    ${BRIDGEMODE}${BRIDGESTRING}" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
" " " " \
"===" "============================================[Informational]===" \
"  1" "ALL ABOUT BRIDGES - READ ME FIRST"  \
"===" "=====================================[OBFS4 bridges -> "$TOGGLE05 \
"  2" "List all "$number_configured_bridges_total" bridges"  \
"  3" "Add additional bridges"  \
"  4" "Activate configured bridges"  \
"  5" "Deactivate configured bridges"  \
"  6" "Remove configured bridges"  \
"  7" "Enter the advanced configuration editor"  \
"  8" "Restart Tor - check if it is working (press CTRL-C to leave)"  \
"===" "=====================================[More Countermeasures]===" \
"  9" "Use SNOWFLAKE to circumvent censorship -> "$SNOWSTRING  \
" 10" "Use MEEK-AZURE to circumvent censorship -> "$MEEKSTRING  \
" 11" $VPNSTRING1" TorBox "$VPNSTRING2" a VPN"  \
" 12" "Countermeasure against a disconnection when idle feature - "$PING 3>&1 1>&2 2>&3)

exitstatus=$?

if [ $exitstatus = 0 ]; then
  if [ "$CHOICE" != " " ]; then

# Display the read.me
    if [ $CHOICE = 1 ]; then
      INPUT=$(cat text/help-bridges-text)
      if (whiptail --title "TorBox - INFO (scroll down!)" --msgbox --scrolltext "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
      fi

# List all bridges configured in torrc and if online display the status of the bridges
    elif [ $CHOICE = 2 ]; then
      clear
      echo -e "${RED}[+] Checking connectivity to the bridge database - please wait...${NOCOLOR}"
      #-m 6 must not be lower, otherwise it looks like there is no connection!
      OCHECK=$(curl -m 6 -s https://onionoo.torproject.org)
      if [ $? == 0 ]; then
        OCHECK="0"
        echo -e "${RED}[+] OK - we are connected with the bridge database${NOCOLOR}"
        sleep 2
      else
        OCHECK="1"
        echo -e "${WHITE}[!] SORRY! - no connection with the bridge database${NOCOLOR}"
        sleep 2
      fi
      if [ $number_configured_bridges_deactivated -gt 0 ]; then
          clear
          echo -e "${RED}[+] DEACTIVATED BRIDGES${NOCOLOR}"
          echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
          echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
          echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
          echo " "
          trap "bash menu-bridge; exit 0" SIGINT
          while [ $i -lt $number_configured_bridges_deactivated ]
          do
              bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_deactivated[$i]})
              if [ $OCHECK == 0 ]; then
                bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
                bridge_status=$(./bridges_check.py -f $bridge_hash)
                if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
                elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
                elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
              else bridge_status=" "
              fi
              i=$(( $i + 1 ))
              bridge_address="$i : $bridge_address $bridge_status"
              echo -e $bridge_address
          done
          echo " "
          echo " "
      fi
      if [ $number_configured_bridges_activated -gt 0 ]; then
          echo -e "${RED}[+] ACTIVATED BRIDGES${NOCOLOR}"
          echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
          echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
          echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
          echo " "
          trap "bash menu-bridge; exit 0" SIGINT
          while [ $j -lt $number_configured_bridges_activated ]
          do
              bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_activated[$j]})
              if [ $OCHECK == 0 ]; then
                bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
                bridge_status=$(./bridges_check.py -f $bridge_hash)
                if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
                elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
                elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
              else bridge_status=" "
              fi
              j=$(( $j + 1 ))
              n=$(( $i + $j ))
              bridge_address="${WHITE}$n : $bridge_address${NOCOLOR} $bridge_status"
              echo -e "$bridge_address"
          done
      fi
      echo " "
      read -n 1 -s -r -p "Press any key to continue"

# Add bridges
    elif [ $CHOICE = 3 ]; then
      sudo bash bridges_add_old $MODE_BRIDGES
      read_config

# Activate bridges
    elif [ $CHOICE = 4 ]; then
      if [ "$MODE_MEEK" = "Bridge meek_lite " ] || [ "$MODE_SNOW" = "Bridge snowflake " ]; then
        whiptail --title "TorBox - INFO" --textbox text/no_meek-snow-please-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
      else
        if [ "$MODE_BRIDGES" != "UseBridges 1" ]; then
          INPUT=$(cat text/activate-bridges-text)
          if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --defaultno --no-button "NO" --yes-button "YES" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
            deactivating_bridge_relay
            sudo bash bridges_activate_old $configured_bridges_deactivated $number_configured_bridges_deactivated 0
            if [ $number_configured_bridges_total = 0]; then
              INPUT=$(cat text/add-bridges-first-text)
              if (whiptail --title "TorBox - INFO" --yesno "$INPUT" 35 $MENU_WIDTH); then
                sudo bash bridges_add_old
              fi
            else
              sudo bash bridges_activate_old 1
            fi
          fi
        fi
      fi
      read_config

# Deactivate bridges
    elif [ $CHOICE = 5 ]; then
      INPUT=$(cat text/deactivate-bridges-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO" --yes-button "YES" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
        sudo bash bridges_deactivate_old 1
      fi
      read_config

# Remove bridges
  elif [ $CHOICE = 6 ]; then
      sudo bash bridges_remove_old 1
      read_config

# Enter the advanced configuration editor
  elif [ $CHOICE = 7 ]; then
      INPUT=$(cat text/advanced-bridges-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "DON'T CHANGE" --yes-button "CHANGE NOW" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        sudo cp ${TORRC} ${BAK}
        sudo nano ${TORRC}
        read_config
      fi

# Restart Tor and check the progress
  elif [ $CHOICE = 8 ]; then
      INPUT=$(cat text/restart-tor-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
        clear
        restarting_tor menu-bridges
      fi

# Use Snowflake to circumvent censorship
  elif [ $CHOICE = 9 ]; then
    sudo bash snowflake $SNOWSTRING $MEEKSTRING
    read_config

# Use Meek-Azure to circumvent censorship
  elif [ $CHOICE = 10 ]; then
    sudo bash meek-azure $MEEKSTRING $SNOWSTRING
    read_config

# Connect/Disconnect TorBox to/from VPN
  elif [ $CHOICE = 11 ]; then
    if [ "$tun0up" = "" ] ; then
      INPUT=$(cat text/connecting-VPN-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO" --yes-button "YES" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        connecting_to_VPN
        sudo /sbin/iptables-restore < /etc/iptables.ipv4.nat
        echo ""
        echo -e "${RED}[+] It may take some time for Tor to reconnect.${NOCOLOR}"
        echo -e "${RED}[+] In case of problems, use main menu entry 4-9.${NOCOLOR}"
        sleep 5
        tun0up=$(ip link | grep tun0)
      fi
    else
      INPUT=$(cat text/disconnecting-VPN-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO" --yes-button "YES" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
        clear
        echo -e "${RED}[+] Disonnecting OpenVPN server...${NOCOLOR}"
        sudo killall openvpn
        echo -e "${RED}[+] Please wait, we need 15 second to configure the interface...${NOCOLOR}"
        sleep 15
        echo ""
        echo -e "${RED}[+] It may take some time for Tor to reconnect.${NOCOLOR}"
        echo -e "${RED}[+] In case of problems, use main menu entry 4-9.${NOCOLOR}"
        sleep 5
        tun0up=$(ip link | grep tun0)
      fi
    fi

# Countermeasure against a disconnection when idle feature
  elif [ $CHOICE = 12 ] ; then
      if [ "$PING" = "OFF" ] || [ "$PING" = "" ]; then
        whiptail --title "TorBox - INFO" --textbox text/ping-text-on $MENU_HEIGHT_25 $MENU_WIDTH
        ping -q $PING_SERVER >/dev/null &
        #Alternative Möglichkeit: screen -dm ping google.com
        echo -e "${RED}[+] Countermeasure against a disconnect when idle feature activated!${NOCOLOR}"
        sleep 2
      fi
      if [ "$PING" = "ON" ]; then
        if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO" --yes-button "YES" --yesno "Would you deactivate the countermeasure against a disconnect when idle feature?" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
          sudo killall ping
          echo -e "${RED}[+] Countermeasure against a disconnect when idle feature deactivated!${NOCOLOR}"
          sleep 2
        fi
      fi
    fi
  fi
else
  clear
  exit 0
fi
bash menu-bridges
